// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitor_errorCode.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "monitor_errorCode.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace monitor {
class ErrorCode2MonitorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ErrorCode2Monitor> {
} _ErrorCode2Monitor_default_instance_;

namespace protobuf_monitor_5ferrorCode_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _ErrorCode2Monitor_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ErrorCode2Monitor_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_monitor_5ferrorCode_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ErrorCode2Monitor::kErrorCodeFieldNumber;
const int ErrorCode2Monitor::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ErrorCode2Monitor::ErrorCode2Monitor()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_monitor_5ferrorCode_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.monitor.ErrorCode2Monitor)
}
ErrorCode2Monitor::ErrorCode2Monitor(const ErrorCode2Monitor& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      errorcode_(from.errorcode_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:atd.monitor.ErrorCode2Monitor)
}

void ErrorCode2Monitor::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_ULONGLONG(0);
}

ErrorCode2Monitor::~ErrorCode2Monitor() {
  // @@protoc_insertion_point(destructor:atd.monitor.ErrorCode2Monitor)
  SharedDtor();
}

void ErrorCode2Monitor::SharedDtor() {
}

void ErrorCode2Monitor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ErrorCode2Monitor& ErrorCode2Monitor::default_instance() {
  protobuf_monitor_5ferrorCode_2eproto::InitDefaults();
  return *internal_default_instance();
}

ErrorCode2Monitor* ErrorCode2Monitor::New(::google::protobuf::Arena* arena) const {
  ErrorCode2Monitor* n = new ErrorCode2Monitor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ErrorCode2Monitor::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.monitor.ErrorCode2Monitor)
  errorcode_.Clear();
  timestamp_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ErrorCode2Monitor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.monitor.ErrorCode2Monitor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 errorCode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_errorcode())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_errorcode())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.monitor.ErrorCode2Monitor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.monitor.ErrorCode2Monitor)
  return false;
#undef DO_
}

void ErrorCode2Monitor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.monitor.ErrorCode2Monitor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 errorCode = 1;
  for (int i = 0, n = this->errorcode_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->errorcode(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint64 timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.monitor.ErrorCode2Monitor)
}

size_t ErrorCode2Monitor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.monitor.ErrorCode2Monitor)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated int32 errorCode = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->errorcode_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->errorcode_size());
    total_size += data_size;
  }

  // optional uint64 timestamp = 2;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorCode2Monitor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ErrorCode2Monitor*>(&from));
}

void ErrorCode2Monitor::MergeFrom(const ErrorCode2Monitor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.monitor.ErrorCode2Monitor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errorcode_.MergeFrom(from.errorcode_);
  if (from.has_timestamp()) {
    set_timestamp(from.timestamp());
  }
}

void ErrorCode2Monitor::CopyFrom(const ErrorCode2Monitor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.monitor.ErrorCode2Monitor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorCode2Monitor::IsInitialized() const {
  return true;
}

void ErrorCode2Monitor::Swap(ErrorCode2Monitor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ErrorCode2Monitor::InternalSwap(ErrorCode2Monitor* other) {
  errorcode_.InternalSwap(&other->errorcode_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ErrorCode2Monitor::GetTypeName() const {
  return "atd.monitor.ErrorCode2Monitor";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ErrorCode2Monitor

// repeated int32 errorCode = 1;
int ErrorCode2Monitor::errorcode_size() const {
  return errorcode_.size();
}
void ErrorCode2Monitor::clear_errorcode() {
  errorcode_.Clear();
}
::google::protobuf::int32 ErrorCode2Monitor::errorcode(int index) const {
  // @@protoc_insertion_point(field_get:atd.monitor.ErrorCode2Monitor.errorCode)
  return errorcode_.Get(index);
}
void ErrorCode2Monitor::set_errorcode(int index, ::google::protobuf::int32 value) {
  errorcode_.Set(index, value);
  // @@protoc_insertion_point(field_set:atd.monitor.ErrorCode2Monitor.errorCode)
}
void ErrorCode2Monitor::add_errorcode(::google::protobuf::int32 value) {
  errorcode_.Add(value);
  // @@protoc_insertion_point(field_add:atd.monitor.ErrorCode2Monitor.errorCode)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ErrorCode2Monitor::errorcode() const {
  // @@protoc_insertion_point(field_list:atd.monitor.ErrorCode2Monitor.errorCode)
  return errorcode_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ErrorCode2Monitor::mutable_errorcode() {
  // @@protoc_insertion_point(field_mutable_list:atd.monitor.ErrorCode2Monitor.errorCode)
  return &errorcode_;
}

// optional uint64 timestamp = 2;
bool ErrorCode2Monitor::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ErrorCode2Monitor::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void ErrorCode2Monitor::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void ErrorCode2Monitor::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::uint64 ErrorCode2Monitor::timestamp() const {
  // @@protoc_insertion_point(field_get:atd.monitor.ErrorCode2Monitor.timestamp)
  return timestamp_;
}
void ErrorCode2Monitor::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:atd.monitor.ErrorCode2Monitor.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace monitor
}  // namespace atd

// @@protoc_insertion_point(global_scope)

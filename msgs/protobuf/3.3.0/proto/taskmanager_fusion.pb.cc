// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: taskmanager_fusion.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "taskmanager_fusion.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace taskmanager {
namespace fusion {
class PointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Point> {
} _Point_default_instance_;
class BlockRtgInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlockRtgInfo> {
} _BlockRtgInfo_default_instance_;
class BayInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BayInfo> {
} _BayInfo_default_instance_;
class BlockBoxInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlockBoxInfo> {
} _BlockBoxInfo_default_instance_;
class BlockObstacleInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BlockObstacleInfo> {
} _BlockObstacleInfo_default_instance_;
class BrigeQcInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BrigeQcInfo> {
} _BrigeQcInfo_default_instance_;
class BrigeInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BrigeInfo> {
} _BrigeInfo_default_instance_;
class TaskManager2FusionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TaskManager2Fusion> {
} _TaskManager2Fusion_default_instance_;
class RouteInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RouteInfo> {
} _RouteInfo_default_instance_;
class MultipleVehiclesRoutesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MultipleVehiclesRoutes> {
} _MultipleVehiclesRoutes_default_instance_;

namespace protobuf_taskmanager_5ffusion_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _Point_default_instance_.Shutdown();
  _BlockRtgInfo_default_instance_.Shutdown();
  _BayInfo_default_instance_.Shutdown();
  _BlockBoxInfo_default_instance_.Shutdown();
  _BlockObstacleInfo_default_instance_.Shutdown();
  _BrigeQcInfo_default_instance_.Shutdown();
  _BrigeInfo_default_instance_.Shutdown();
  _TaskManager2Fusion_default_instance_.Shutdown();
  _RouteInfo_default_instance_.Shutdown();
  _MultipleVehiclesRoutes_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Point_default_instance_.DefaultConstruct();
  _BlockRtgInfo_default_instance_.DefaultConstruct();
  _BayInfo_default_instance_.DefaultConstruct();
  _BlockBoxInfo_default_instance_.DefaultConstruct();
  _BlockObstacleInfo_default_instance_.DefaultConstruct();
  _BrigeQcInfo_default_instance_.DefaultConstruct();
  _BrigeInfo_default_instance_.DefaultConstruct();
  _TaskManager2Fusion_default_instance_.DefaultConstruct();
  _RouteInfo_default_instance_.DefaultConstruct();
  _MultipleVehiclesRoutes_default_instance_.DefaultConstruct();
  _BlockRtgInfo_default_instance_.get_mutable()->rtgcenterpos_ = const_cast< ::atd::taskmanager::fusion::Point*>(
      ::atd::taskmanager::fusion::Point::internal_default_instance());
  _BlockObstacleInfo_default_instance_.get_mutable()->blockboxinfo_ = const_cast< ::atd::taskmanager::fusion::BlockBoxInfo*>(
      ::atd::taskmanager::fusion::BlockBoxInfo::internal_default_instance());
  _BrigeQcInfo_default_instance_.get_mutable()->qccenterpos_ = const_cast< ::atd::taskmanager::fusion::Point*>(
      ::atd::taskmanager::fusion::Point::internal_default_instance());
  _TaskManager2Fusion_default_instance_.get_mutable()->blockobstacleinfo_ = const_cast< ::atd::taskmanager::fusion::BlockObstacleInfo*>(
      ::atd::taskmanager::fusion::BlockObstacleInfo::internal_default_instance());
  _TaskManager2Fusion_default_instance_.get_mutable()->brigeinfo_ = const_cast< ::atd::taskmanager::fusion::BrigeInfo*>(
      ::atd::taskmanager::fusion::BrigeInfo::internal_default_instance());
  _RouteInfo_default_instance_.get_mutable()->centercoordinate_ = const_cast< ::atd::taskmanager::fusion::Point*>(
      ::atd::taskmanager::fusion::Point::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_taskmanager_5ffusion_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kLongitudeFieldNumber;
const int Point::kLatitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_taskmanager_5ffusion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.taskmanager.fusion.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:atd.taskmanager.fusion.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&longitude_, 0, reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_) + sizeof(latitude_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:atd.taskmanager.fusion.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Point& Point::default_instance() {
  protobuf_taskmanager_5ffusion_2eproto::InitDefaults();
  return *internal_default_instance();
}

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.taskmanager.fusion.Point)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&longitude_, 0, reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_) + sizeof(latitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.taskmanager.fusion.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double longitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.taskmanager.fusion.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.taskmanager.fusion.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.taskmanager.fusion.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double longitude = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->longitude(), output);
  }

  // optional double latitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.taskmanager.fusion.Point)
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.taskmanager.fusion.Point)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional double longitude = 1;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional double latitude = 2;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Point*>(&from));
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.taskmanager.fusion.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      latitude_ = from.latitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.taskmanager.fusion.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(longitude_, other->longitude_);
  std::swap(latitude_, other->latitude_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Point::GetTypeName() const {
  return "atd.taskmanager.fusion.Point";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// optional double longitude = 1;
bool Point::has_longitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Point::set_has_longitude() {
  _has_bits_[0] |= 0x00000001u;
}
void Point::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000001u;
}
void Point::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
double Point::longitude() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.Point.longitude)
  return longitude_;
}
void Point::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:atd.taskmanager.fusion.Point.longitude)
}

// optional double latitude = 2;
bool Point::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Point::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
void Point::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
void Point::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
double Point::latitude() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.Point.latitude)
  return latitude_;
}
void Point::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:atd.taskmanager.fusion.Point.latitude)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockRtgInfo::kRtgNoFieldNumber;
const int BlockRtgInfo::kRtgCenterPosFieldNumber;
const int BlockRtgInfo::kRtgScopeCoordinateFieldNumber;
const int BlockRtgInfo::kNTimeStampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockRtgInfo::BlockRtgInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_taskmanager_5ffusion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.taskmanager.fusion.BlockRtgInfo)
}
BlockRtgInfo::BlockRtgInfo(const BlockRtgInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      rtgscopecoordinate_(from.rtgscopecoordinate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rtgno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rtgno()) {
    rtgno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtgno_);
  }
  if (from.has_rtgcenterpos()) {
    rtgcenterpos_ = new ::atd::taskmanager::fusion::Point(*from.rtgcenterpos_);
  } else {
    rtgcenterpos_ = NULL;
  }
  ntimestamp_ = from.ntimestamp_;
  // @@protoc_insertion_point(copy_constructor:atd.taskmanager.fusion.BlockRtgInfo)
}

void BlockRtgInfo::SharedCtor() {
  _cached_size_ = 0;
  rtgno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rtgcenterpos_, 0, reinterpret_cast<char*>(&ntimestamp_) -
    reinterpret_cast<char*>(&rtgcenterpos_) + sizeof(ntimestamp_));
}

BlockRtgInfo::~BlockRtgInfo() {
  // @@protoc_insertion_point(destructor:atd.taskmanager.fusion.BlockRtgInfo)
  SharedDtor();
}

void BlockRtgInfo::SharedDtor() {
  rtgno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete rtgcenterpos_;
  }
}

void BlockRtgInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BlockRtgInfo& BlockRtgInfo::default_instance() {
  protobuf_taskmanager_5ffusion_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlockRtgInfo* BlockRtgInfo::New(::google::protobuf::Arena* arena) const {
  BlockRtgInfo* n = new BlockRtgInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockRtgInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.taskmanager.fusion.BlockRtgInfo)
  rtgscopecoordinate_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_rtgno()) {
      GOOGLE_DCHECK(!rtgno_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*rtgno_.UnsafeRawStringPointer())->clear();
    }
    if (has_rtgcenterpos()) {
      GOOGLE_DCHECK(rtgcenterpos_ != NULL);
      rtgcenterpos_->::atd::taskmanager::fusion::Point::Clear();
    }
  }
  ntimestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlockRtgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.taskmanager.fusion.BlockRtgInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string rtgNo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rtgno()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.taskmanager.fusion.Point rtgCenterPos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rtgcenterpos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.taskmanager.fusion.Point rtgScopeCoordinate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rtgscopecoordinate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 nTimeStamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ntimestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ntimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.taskmanager.fusion.BlockRtgInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.taskmanager.fusion.BlockRtgInfo)
  return false;
#undef DO_
}

void BlockRtgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.taskmanager.fusion.BlockRtgInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string rtgNo = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rtgno(), output);
  }

  // optional .atd.taskmanager.fusion.Point rtgCenterPos = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->rtgcenterpos_, output);
  }

  // repeated .atd.taskmanager.fusion.Point rtgScopeCoordinate = 3;
  for (unsigned int i = 0, n = this->rtgscopecoordinate_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->rtgscopecoordinate(i), output);
  }

  // optional int64 nTimeStamp = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ntimestamp(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.taskmanager.fusion.BlockRtgInfo)
}

size_t BlockRtgInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.taskmanager.fusion.BlockRtgInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.taskmanager.fusion.Point rtgScopeCoordinate = 3;
  {
    unsigned int count = this->rtgscopecoordinate_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rtgscopecoordinate(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string rtgNo = 1;
    if (has_rtgno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rtgno());
    }

    // optional .atd.taskmanager.fusion.Point rtgCenterPos = 2;
    if (has_rtgcenterpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rtgcenterpos_);
    }

    // optional int64 nTimeStamp = 4;
    if (has_ntimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ntimestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockRtgInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BlockRtgInfo*>(&from));
}

void BlockRtgInfo::MergeFrom(const BlockRtgInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.taskmanager.fusion.BlockRtgInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rtgscopecoordinate_.MergeFrom(from.rtgscopecoordinate_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rtgno();
      rtgno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtgno_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_rtgcenterpos()->::atd::taskmanager::fusion::Point::MergeFrom(from.rtgcenterpos());
    }
    if (cached_has_bits & 0x00000004u) {
      ntimestamp_ = from.ntimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlockRtgInfo::CopyFrom(const BlockRtgInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.taskmanager.fusion.BlockRtgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRtgInfo::IsInitialized() const {
  return true;
}

void BlockRtgInfo::Swap(BlockRtgInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockRtgInfo::InternalSwap(BlockRtgInfo* other) {
  rtgscopecoordinate_.InternalSwap(&other->rtgscopecoordinate_);
  rtgno_.Swap(&other->rtgno_);
  std::swap(rtgcenterpos_, other->rtgcenterpos_);
  std::swap(ntimestamp_, other->ntimestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BlockRtgInfo::GetTypeName() const {
  return "atd.taskmanager.fusion.BlockRtgInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockRtgInfo

// optional string rtgNo = 1;
bool BlockRtgInfo::has_rtgno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlockRtgInfo::set_has_rtgno() {
  _has_bits_[0] |= 0x00000001u;
}
void BlockRtgInfo::clear_has_rtgno() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlockRtgInfo::clear_rtgno() {
  rtgno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rtgno();
}
const ::std::string& BlockRtgInfo::rtgno() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.BlockRtgInfo.rtgNo)
  return rtgno_.GetNoArena();
}
void BlockRtgInfo::set_rtgno(const ::std::string& value) {
  set_has_rtgno();
  rtgno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.taskmanager.fusion.BlockRtgInfo.rtgNo)
}
#if LANG_CXX11
void BlockRtgInfo::set_rtgno(::std::string&& value) {
  set_has_rtgno();
  rtgno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.taskmanager.fusion.BlockRtgInfo.rtgNo)
}
#endif
void BlockRtgInfo::set_rtgno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_rtgno();
  rtgno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.taskmanager.fusion.BlockRtgInfo.rtgNo)
}
void BlockRtgInfo::set_rtgno(const char* value, size_t size) {
  set_has_rtgno();
  rtgno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.taskmanager.fusion.BlockRtgInfo.rtgNo)
}
::std::string* BlockRtgInfo::mutable_rtgno() {
  set_has_rtgno();
  // @@protoc_insertion_point(field_mutable:atd.taskmanager.fusion.BlockRtgInfo.rtgNo)
  return rtgno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BlockRtgInfo::release_rtgno() {
  // @@protoc_insertion_point(field_release:atd.taskmanager.fusion.BlockRtgInfo.rtgNo)
  clear_has_rtgno();
  return rtgno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BlockRtgInfo::set_allocated_rtgno(::std::string* rtgno) {
  if (rtgno != NULL) {
    set_has_rtgno();
  } else {
    clear_has_rtgno();
  }
  rtgno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rtgno);
  // @@protoc_insertion_point(field_set_allocated:atd.taskmanager.fusion.BlockRtgInfo.rtgNo)
}

// optional .atd.taskmanager.fusion.Point rtgCenterPos = 2;
bool BlockRtgInfo::has_rtgcenterpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlockRtgInfo::set_has_rtgcenterpos() {
  _has_bits_[0] |= 0x00000002u;
}
void BlockRtgInfo::clear_has_rtgcenterpos() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlockRtgInfo::clear_rtgcenterpos() {
  if (rtgcenterpos_ != NULL) rtgcenterpos_->::atd::taskmanager::fusion::Point::Clear();
  clear_has_rtgcenterpos();
}
const ::atd::taskmanager::fusion::Point& BlockRtgInfo::rtgcenterpos() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.BlockRtgInfo.rtgCenterPos)
  return rtgcenterpos_ != NULL ? *rtgcenterpos_
                         : *::atd::taskmanager::fusion::Point::internal_default_instance();
}
::atd::taskmanager::fusion::Point* BlockRtgInfo::mutable_rtgcenterpos() {
  set_has_rtgcenterpos();
  if (rtgcenterpos_ == NULL) {
    rtgcenterpos_ = new ::atd::taskmanager::fusion::Point;
  }
  // @@protoc_insertion_point(field_mutable:atd.taskmanager.fusion.BlockRtgInfo.rtgCenterPos)
  return rtgcenterpos_;
}
::atd::taskmanager::fusion::Point* BlockRtgInfo::release_rtgcenterpos() {
  // @@protoc_insertion_point(field_release:atd.taskmanager.fusion.BlockRtgInfo.rtgCenterPos)
  clear_has_rtgcenterpos();
  ::atd::taskmanager::fusion::Point* temp = rtgcenterpos_;
  rtgcenterpos_ = NULL;
  return temp;
}
void BlockRtgInfo::set_allocated_rtgcenterpos(::atd::taskmanager::fusion::Point* rtgcenterpos) {
  delete rtgcenterpos_;
  rtgcenterpos_ = rtgcenterpos;
  if (rtgcenterpos) {
    set_has_rtgcenterpos();
  } else {
    clear_has_rtgcenterpos();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.taskmanager.fusion.BlockRtgInfo.rtgCenterPos)
}

// repeated .atd.taskmanager.fusion.Point rtgScopeCoordinate = 3;
int BlockRtgInfo::rtgscopecoordinate_size() const {
  return rtgscopecoordinate_.size();
}
void BlockRtgInfo::clear_rtgscopecoordinate() {
  rtgscopecoordinate_.Clear();
}
const ::atd::taskmanager::fusion::Point& BlockRtgInfo::rtgscopecoordinate(int index) const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.BlockRtgInfo.rtgScopeCoordinate)
  return rtgscopecoordinate_.Get(index);
}
::atd::taskmanager::fusion::Point* BlockRtgInfo::mutable_rtgscopecoordinate(int index) {
  // @@protoc_insertion_point(field_mutable:atd.taskmanager.fusion.BlockRtgInfo.rtgScopeCoordinate)
  return rtgscopecoordinate_.Mutable(index);
}
::atd::taskmanager::fusion::Point* BlockRtgInfo::add_rtgscopecoordinate() {
  // @@protoc_insertion_point(field_add:atd.taskmanager.fusion.BlockRtgInfo.rtgScopeCoordinate)
  return rtgscopecoordinate_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::taskmanager::fusion::Point >*
BlockRtgInfo::mutable_rtgscopecoordinate() {
  // @@protoc_insertion_point(field_mutable_list:atd.taskmanager.fusion.BlockRtgInfo.rtgScopeCoordinate)
  return &rtgscopecoordinate_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::taskmanager::fusion::Point >&
BlockRtgInfo::rtgscopecoordinate() const {
  // @@protoc_insertion_point(field_list:atd.taskmanager.fusion.BlockRtgInfo.rtgScopeCoordinate)
  return rtgscopecoordinate_;
}

// optional int64 nTimeStamp = 4;
bool BlockRtgInfo::has_ntimestamp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BlockRtgInfo::set_has_ntimestamp() {
  _has_bits_[0] |= 0x00000004u;
}
void BlockRtgInfo::clear_has_ntimestamp() {
  _has_bits_[0] &= ~0x00000004u;
}
void BlockRtgInfo::clear_ntimestamp() {
  ntimestamp_ = GOOGLE_LONGLONG(0);
  clear_has_ntimestamp();
}
::google::protobuf::int64 BlockRtgInfo::ntimestamp() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.BlockRtgInfo.nTimeStamp)
  return ntimestamp_;
}
void BlockRtgInfo::set_ntimestamp(::google::protobuf::int64 value) {
  set_has_ntimestamp();
  ntimestamp_ = value;
  // @@protoc_insertion_point(field_set:atd.taskmanager.fusion.BlockRtgInfo.nTimeStamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BayInfo::kBayFieldNumber;
const int BayInfo::kRowFieldNumber;
const int BayInfo::kHasBoxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BayInfo::BayInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_taskmanager_5ffusion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.taskmanager.fusion.BayInfo)
}
BayInfo::BayInfo(const BayInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bay_, &from.bay_,
    reinterpret_cast<char*>(&hasbox_) -
    reinterpret_cast<char*>(&bay_) + sizeof(hasbox_));
  // @@protoc_insertion_point(copy_constructor:atd.taskmanager.fusion.BayInfo)
}

void BayInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bay_, 0, reinterpret_cast<char*>(&hasbox_) -
    reinterpret_cast<char*>(&bay_) + sizeof(hasbox_));
}

BayInfo::~BayInfo() {
  // @@protoc_insertion_point(destructor:atd.taskmanager.fusion.BayInfo)
  SharedDtor();
}

void BayInfo::SharedDtor() {
}

void BayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BayInfo& BayInfo::default_instance() {
  protobuf_taskmanager_5ffusion_2eproto::InitDefaults();
  return *internal_default_instance();
}

BayInfo* BayInfo::New(::google::protobuf::Arena* arena) const {
  BayInfo* n = new BayInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.taskmanager.fusion.BayInfo)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&bay_, 0, reinterpret_cast<char*>(&hasbox_) -
      reinterpret_cast<char*>(&bay_) + sizeof(hasbox_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.taskmanager.fusion.BayInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_bay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 row = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_row();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hasBox = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_hasbox();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasbox_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.taskmanager.fusion.BayInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.taskmanager.fusion.BayInfo)
  return false;
#undef DO_
}

void BayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.taskmanager.fusion.BayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 bay = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bay(), output);
  }

  // optional int32 row = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->row(), output);
  }

  // optional bool hasBox = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->hasbox(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.taskmanager.fusion.BayInfo)
}

size_t BayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.taskmanager.fusion.BayInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 bay = 1;
    if (has_bay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bay());
    }

    // optional int32 row = 2;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

    // optional bool hasBox = 3;
    if (has_hasbox()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BayInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BayInfo*>(&from));
}

void BayInfo::MergeFrom(const BayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.taskmanager.fusion.BayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      bay_ = from.bay_;
    }
    if (cached_has_bits & 0x00000002u) {
      row_ = from.row_;
    }
    if (cached_has_bits & 0x00000004u) {
      hasbox_ = from.hasbox_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BayInfo::CopyFrom(const BayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.taskmanager.fusion.BayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BayInfo::IsInitialized() const {
  return true;
}

void BayInfo::Swap(BayInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BayInfo::InternalSwap(BayInfo* other) {
  std::swap(bay_, other->bay_);
  std::swap(row_, other->row_);
  std::swap(hasbox_, other->hasbox_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BayInfo::GetTypeName() const {
  return "atd.taskmanager.fusion.BayInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BayInfo

// optional int32 bay = 1;
bool BayInfo::has_bay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BayInfo::set_has_bay() {
  _has_bits_[0] |= 0x00000001u;
}
void BayInfo::clear_has_bay() {
  _has_bits_[0] &= ~0x00000001u;
}
void BayInfo::clear_bay() {
  bay_ = 0;
  clear_has_bay();
}
::google::protobuf::int32 BayInfo::bay() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.BayInfo.bay)
  return bay_;
}
void BayInfo::set_bay(::google::protobuf::int32 value) {
  set_has_bay();
  bay_ = value;
  // @@protoc_insertion_point(field_set:atd.taskmanager.fusion.BayInfo.bay)
}

// optional int32 row = 2;
bool BayInfo::has_row() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BayInfo::set_has_row() {
  _has_bits_[0] |= 0x00000002u;
}
void BayInfo::clear_has_row() {
  _has_bits_[0] &= ~0x00000002u;
}
void BayInfo::clear_row() {
  row_ = 0;
  clear_has_row();
}
::google::protobuf::int32 BayInfo::row() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.BayInfo.row)
  return row_;
}
void BayInfo::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
  // @@protoc_insertion_point(field_set:atd.taskmanager.fusion.BayInfo.row)
}

// optional bool hasBox = 3;
bool BayInfo::has_hasbox() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BayInfo::set_has_hasbox() {
  _has_bits_[0] |= 0x00000004u;
}
void BayInfo::clear_has_hasbox() {
  _has_bits_[0] &= ~0x00000004u;
}
void BayInfo::clear_hasbox() {
  hasbox_ = false;
  clear_has_hasbox();
}
bool BayInfo::hasbox() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.BayInfo.hasBox)
  return hasbox_;
}
void BayInfo::set_hasbox(bool value) {
  set_has_hasbox();
  hasbox_ = value;
  // @@protoc_insertion_point(field_set:atd.taskmanager.fusion.BayInfo.hasBox)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockBoxInfo::kBlockBigBayListFieldNumber;
const int BlockBoxInfo::kBlockSmallBayListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockBoxInfo::BlockBoxInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_taskmanager_5ffusion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.taskmanager.fusion.BlockBoxInfo)
}
BlockBoxInfo::BlockBoxInfo(const BlockBoxInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      blockbigbaylist_(from.blockbigbaylist_),
      blocksmallbaylist_(from.blocksmallbaylist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:atd.taskmanager.fusion.BlockBoxInfo)
}

void BlockBoxInfo::SharedCtor() {
  _cached_size_ = 0;
}

BlockBoxInfo::~BlockBoxInfo() {
  // @@protoc_insertion_point(destructor:atd.taskmanager.fusion.BlockBoxInfo)
  SharedDtor();
}

void BlockBoxInfo::SharedDtor() {
}

void BlockBoxInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BlockBoxInfo& BlockBoxInfo::default_instance() {
  protobuf_taskmanager_5ffusion_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlockBoxInfo* BlockBoxInfo::New(::google::protobuf::Arena* arena) const {
  BlockBoxInfo* n = new BlockBoxInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockBoxInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.taskmanager.fusion.BlockBoxInfo)
  blockbigbaylist_.Clear();
  blocksmallbaylist_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlockBoxInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.taskmanager.fusion.BlockBoxInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .atd.taskmanager.fusion.BayInfo blockBigBayList = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blockbigbaylist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.taskmanager.fusion.BayInfo blockSmallBayList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocksmallbaylist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.taskmanager.fusion.BlockBoxInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.taskmanager.fusion.BlockBoxInfo)
  return false;
#undef DO_
}

void BlockBoxInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.taskmanager.fusion.BlockBoxInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .atd.taskmanager.fusion.BayInfo blockBigBayList = 1;
  for (unsigned int i = 0, n = this->blockbigbaylist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->blockbigbaylist(i), output);
  }

  // repeated .atd.taskmanager.fusion.BayInfo blockSmallBayList = 2;
  for (unsigned int i = 0, n = this->blocksmallbaylist_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->blocksmallbaylist(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.taskmanager.fusion.BlockBoxInfo)
}

size_t BlockBoxInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.taskmanager.fusion.BlockBoxInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.taskmanager.fusion.BayInfo blockBigBayList = 1;
  {
    unsigned int count = this->blockbigbaylist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blockbigbaylist(i));
    }
  }

  // repeated .atd.taskmanager.fusion.BayInfo blockSmallBayList = 2;
  {
    unsigned int count = this->blocksmallbaylist_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blocksmallbaylist(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockBoxInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BlockBoxInfo*>(&from));
}

void BlockBoxInfo::MergeFrom(const BlockBoxInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.taskmanager.fusion.BlockBoxInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blockbigbaylist_.MergeFrom(from.blockbigbaylist_);
  blocksmallbaylist_.MergeFrom(from.blocksmallbaylist_);
}

void BlockBoxInfo::CopyFrom(const BlockBoxInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.taskmanager.fusion.BlockBoxInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockBoxInfo::IsInitialized() const {
  return true;
}

void BlockBoxInfo::Swap(BlockBoxInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockBoxInfo::InternalSwap(BlockBoxInfo* other) {
  blockbigbaylist_.InternalSwap(&other->blockbigbaylist_);
  blocksmallbaylist_.InternalSwap(&other->blocksmallbaylist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BlockBoxInfo::GetTypeName() const {
  return "atd.taskmanager.fusion.BlockBoxInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockBoxInfo

// repeated .atd.taskmanager.fusion.BayInfo blockBigBayList = 1;
int BlockBoxInfo::blockbigbaylist_size() const {
  return blockbigbaylist_.size();
}
void BlockBoxInfo::clear_blockbigbaylist() {
  blockbigbaylist_.Clear();
}
const ::atd::taskmanager::fusion::BayInfo& BlockBoxInfo::blockbigbaylist(int index) const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.BlockBoxInfo.blockBigBayList)
  return blockbigbaylist_.Get(index);
}
::atd::taskmanager::fusion::BayInfo* BlockBoxInfo::mutable_blockbigbaylist(int index) {
  // @@protoc_insertion_point(field_mutable:atd.taskmanager.fusion.BlockBoxInfo.blockBigBayList)
  return blockbigbaylist_.Mutable(index);
}
::atd::taskmanager::fusion::BayInfo* BlockBoxInfo::add_blockbigbaylist() {
  // @@protoc_insertion_point(field_add:atd.taskmanager.fusion.BlockBoxInfo.blockBigBayList)
  return blockbigbaylist_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::taskmanager::fusion::BayInfo >*
BlockBoxInfo::mutable_blockbigbaylist() {
  // @@protoc_insertion_point(field_mutable_list:atd.taskmanager.fusion.BlockBoxInfo.blockBigBayList)
  return &blockbigbaylist_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::taskmanager::fusion::BayInfo >&
BlockBoxInfo::blockbigbaylist() const {
  // @@protoc_insertion_point(field_list:atd.taskmanager.fusion.BlockBoxInfo.blockBigBayList)
  return blockbigbaylist_;
}

// repeated .atd.taskmanager.fusion.BayInfo blockSmallBayList = 2;
int BlockBoxInfo::blocksmallbaylist_size() const {
  return blocksmallbaylist_.size();
}
void BlockBoxInfo::clear_blocksmallbaylist() {
  blocksmallbaylist_.Clear();
}
const ::atd::taskmanager::fusion::BayInfo& BlockBoxInfo::blocksmallbaylist(int index) const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.BlockBoxInfo.blockSmallBayList)
  return blocksmallbaylist_.Get(index);
}
::atd::taskmanager::fusion::BayInfo* BlockBoxInfo::mutable_blocksmallbaylist(int index) {
  // @@protoc_insertion_point(field_mutable:atd.taskmanager.fusion.BlockBoxInfo.blockSmallBayList)
  return blocksmallbaylist_.Mutable(index);
}
::atd::taskmanager::fusion::BayInfo* BlockBoxInfo::add_blocksmallbaylist() {
  // @@protoc_insertion_point(field_add:atd.taskmanager.fusion.BlockBoxInfo.blockSmallBayList)
  return blocksmallbaylist_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::taskmanager::fusion::BayInfo >*
BlockBoxInfo::mutable_blocksmallbaylist() {
  // @@protoc_insertion_point(field_mutable_list:atd.taskmanager.fusion.BlockBoxInfo.blockSmallBayList)
  return &blocksmallbaylist_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::taskmanager::fusion::BayInfo >&
BlockBoxInfo::blocksmallbaylist() const {
  // @@protoc_insertion_point(field_list:atd.taskmanager.fusion.BlockBoxInfo.blockSmallBayList)
  return blocksmallbaylist_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockObstacleInfo::kBlockNoFieldNumber;
const int BlockObstacleInfo::kDriveTypeFieldNumber;
const int BlockObstacleInfo::kBlockRtgInfoFieldNumber;
const int BlockObstacleInfo::kBlockBoxInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockObstacleInfo::BlockObstacleInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_taskmanager_5ffusion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.taskmanager.fusion.BlockObstacleInfo)
}
BlockObstacleInfo::BlockObstacleInfo(const BlockObstacleInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      blockrtginfo_(from.blockrtginfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_blockboxinfo()) {
    blockboxinfo_ = new ::atd::taskmanager::fusion::BlockBoxInfo(*from.blockboxinfo_);
  } else {
    blockboxinfo_ = NULL;
  }
  ::memcpy(&blockno_, &from.blockno_,
    reinterpret_cast<char*>(&drivetype_) -
    reinterpret_cast<char*>(&blockno_) + sizeof(drivetype_));
  // @@protoc_insertion_point(copy_constructor:atd.taskmanager.fusion.BlockObstacleInfo)
}

void BlockObstacleInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&blockboxinfo_, 0, reinterpret_cast<char*>(&drivetype_) -
    reinterpret_cast<char*>(&blockboxinfo_) + sizeof(drivetype_));
}

BlockObstacleInfo::~BlockObstacleInfo() {
  // @@protoc_insertion_point(destructor:atd.taskmanager.fusion.BlockObstacleInfo)
  SharedDtor();
}

void BlockObstacleInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete blockboxinfo_;
  }
}

void BlockObstacleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BlockObstacleInfo& BlockObstacleInfo::default_instance() {
  protobuf_taskmanager_5ffusion_2eproto::InitDefaults();
  return *internal_default_instance();
}

BlockObstacleInfo* BlockObstacleInfo::New(::google::protobuf::Arena* arena) const {
  BlockObstacleInfo* n = new BlockObstacleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlockObstacleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.taskmanager.fusion.BlockObstacleInfo)
  blockrtginfo_.Clear();
  if (has_blockboxinfo()) {
    GOOGLE_DCHECK(blockboxinfo_ != NULL);
    blockboxinfo_->::atd::taskmanager::fusion::BlockBoxInfo::Clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&blockno_, 0, reinterpret_cast<char*>(&drivetype_) -
      reinterpret_cast<char*>(&blockno_) + sizeof(drivetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlockObstacleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.taskmanager.fusion.BlockObstacleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 blockNo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_blockno();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blockno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 driveType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_drivetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drivetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.taskmanager.fusion.BlockRtgInfo blockRtgInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blockrtginfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.taskmanager.fusion.BlockBoxInfo blockBoxInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blockboxinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.taskmanager.fusion.BlockObstacleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.taskmanager.fusion.BlockObstacleInfo)
  return false;
#undef DO_
}

void BlockObstacleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.taskmanager.fusion.BlockObstacleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 blockNo = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->blockno(), output);
  }

  // optional int32 driveType = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->drivetype(), output);
  }

  // repeated .atd.taskmanager.fusion.BlockRtgInfo blockRtgInfo = 3;
  for (unsigned int i = 0, n = this->blockrtginfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->blockrtginfo(i), output);
  }

  // optional .atd.taskmanager.fusion.BlockBoxInfo blockBoxInfo = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->blockboxinfo_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.taskmanager.fusion.BlockObstacleInfo)
}

size_t BlockObstacleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.taskmanager.fusion.BlockObstacleInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.taskmanager.fusion.BlockRtgInfo blockRtgInfo = 3;
  {
    unsigned int count = this->blockrtginfo_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blockrtginfo(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .atd.taskmanager.fusion.BlockBoxInfo blockBoxInfo = 4;
    if (has_blockboxinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->blockboxinfo_);
    }

    // optional int32 blockNo = 1;
    if (has_blockno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blockno());
    }

    // optional int32 driveType = 2;
    if (has_drivetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drivetype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockObstacleInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BlockObstacleInfo*>(&from));
}

void BlockObstacleInfo::MergeFrom(const BlockObstacleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.taskmanager.fusion.BlockObstacleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blockrtginfo_.MergeFrom(from.blockrtginfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_blockboxinfo()->::atd::taskmanager::fusion::BlockBoxInfo::MergeFrom(from.blockboxinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      blockno_ = from.blockno_;
    }
    if (cached_has_bits & 0x00000004u) {
      drivetype_ = from.drivetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlockObstacleInfo::CopyFrom(const BlockObstacleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.taskmanager.fusion.BlockObstacleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockObstacleInfo::IsInitialized() const {
  return true;
}

void BlockObstacleInfo::Swap(BlockObstacleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockObstacleInfo::InternalSwap(BlockObstacleInfo* other) {
  blockrtginfo_.InternalSwap(&other->blockrtginfo_);
  std::swap(blockboxinfo_, other->blockboxinfo_);
  std::swap(blockno_, other->blockno_);
  std::swap(drivetype_, other->drivetype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BlockObstacleInfo::GetTypeName() const {
  return "atd.taskmanager.fusion.BlockObstacleInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlockObstacleInfo

// optional int32 blockNo = 1;
bool BlockObstacleInfo::has_blockno() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlockObstacleInfo::set_has_blockno() {
  _has_bits_[0] |= 0x00000002u;
}
void BlockObstacleInfo::clear_has_blockno() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlockObstacleInfo::clear_blockno() {
  blockno_ = 0;
  clear_has_blockno();
}
::google::protobuf::int32 BlockObstacleInfo::blockno() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.BlockObstacleInfo.blockNo)
  return blockno_;
}
void BlockObstacleInfo::set_blockno(::google::protobuf::int32 value) {
  set_has_blockno();
  blockno_ = value;
  // @@protoc_insertion_point(field_set:atd.taskmanager.fusion.BlockObstacleInfo.blockNo)
}

// optional int32 driveType = 2;
bool BlockObstacleInfo::has_drivetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BlockObstacleInfo::set_has_drivetype() {
  _has_bits_[0] |= 0x00000004u;
}
void BlockObstacleInfo::clear_has_drivetype() {
  _has_bits_[0] &= ~0x00000004u;
}
void BlockObstacleInfo::clear_drivetype() {
  drivetype_ = 0;
  clear_has_drivetype();
}
::google::protobuf::int32 BlockObstacleInfo::drivetype() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.BlockObstacleInfo.driveType)
  return drivetype_;
}
void BlockObstacleInfo::set_drivetype(::google::protobuf::int32 value) {
  set_has_drivetype();
  drivetype_ = value;
  // @@protoc_insertion_point(field_set:atd.taskmanager.fusion.BlockObstacleInfo.driveType)
}

// repeated .atd.taskmanager.fusion.BlockRtgInfo blockRtgInfo = 3;
int BlockObstacleInfo::blockrtginfo_size() const {
  return blockrtginfo_.size();
}
void BlockObstacleInfo::clear_blockrtginfo() {
  blockrtginfo_.Clear();
}
const ::atd::taskmanager::fusion::BlockRtgInfo& BlockObstacleInfo::blockrtginfo(int index) const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.BlockObstacleInfo.blockRtgInfo)
  return blockrtginfo_.Get(index);
}
::atd::taskmanager::fusion::BlockRtgInfo* BlockObstacleInfo::mutable_blockrtginfo(int index) {
  // @@protoc_insertion_point(field_mutable:atd.taskmanager.fusion.BlockObstacleInfo.blockRtgInfo)
  return blockrtginfo_.Mutable(index);
}
::atd::taskmanager::fusion::BlockRtgInfo* BlockObstacleInfo::add_blockrtginfo() {
  // @@protoc_insertion_point(field_add:atd.taskmanager.fusion.BlockObstacleInfo.blockRtgInfo)
  return blockrtginfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::taskmanager::fusion::BlockRtgInfo >*
BlockObstacleInfo::mutable_blockrtginfo() {
  // @@protoc_insertion_point(field_mutable_list:atd.taskmanager.fusion.BlockObstacleInfo.blockRtgInfo)
  return &blockrtginfo_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::taskmanager::fusion::BlockRtgInfo >&
BlockObstacleInfo::blockrtginfo() const {
  // @@protoc_insertion_point(field_list:atd.taskmanager.fusion.BlockObstacleInfo.blockRtgInfo)
  return blockrtginfo_;
}

// optional .atd.taskmanager.fusion.BlockBoxInfo blockBoxInfo = 4;
bool BlockObstacleInfo::has_blockboxinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlockObstacleInfo::set_has_blockboxinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void BlockObstacleInfo::clear_has_blockboxinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlockObstacleInfo::clear_blockboxinfo() {
  if (blockboxinfo_ != NULL) blockboxinfo_->::atd::taskmanager::fusion::BlockBoxInfo::Clear();
  clear_has_blockboxinfo();
}
const ::atd::taskmanager::fusion::BlockBoxInfo& BlockObstacleInfo::blockboxinfo() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.BlockObstacleInfo.blockBoxInfo)
  return blockboxinfo_ != NULL ? *blockboxinfo_
                         : *::atd::taskmanager::fusion::BlockBoxInfo::internal_default_instance();
}
::atd::taskmanager::fusion::BlockBoxInfo* BlockObstacleInfo::mutable_blockboxinfo() {
  set_has_blockboxinfo();
  if (blockboxinfo_ == NULL) {
    blockboxinfo_ = new ::atd::taskmanager::fusion::BlockBoxInfo;
  }
  // @@protoc_insertion_point(field_mutable:atd.taskmanager.fusion.BlockObstacleInfo.blockBoxInfo)
  return blockboxinfo_;
}
::atd::taskmanager::fusion::BlockBoxInfo* BlockObstacleInfo::release_blockboxinfo() {
  // @@protoc_insertion_point(field_release:atd.taskmanager.fusion.BlockObstacleInfo.blockBoxInfo)
  clear_has_blockboxinfo();
  ::atd::taskmanager::fusion::BlockBoxInfo* temp = blockboxinfo_;
  blockboxinfo_ = NULL;
  return temp;
}
void BlockObstacleInfo::set_allocated_blockboxinfo(::atd::taskmanager::fusion::BlockBoxInfo* blockboxinfo) {
  delete blockboxinfo_;
  blockboxinfo_ = blockboxinfo;
  if (blockboxinfo) {
    set_has_blockboxinfo();
  } else {
    clear_has_blockboxinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.taskmanager.fusion.BlockObstacleInfo.blockBoxInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrigeQcInfo::kQcNoFieldNumber;
const int BrigeQcInfo::kQcHeadingFieldNumber;
const int BrigeQcInfo::kQcCenterPosFieldNumber;
const int BrigeQcInfo::kQcScopeCoordinateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrigeQcInfo::BrigeQcInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_taskmanager_5ffusion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.taskmanager.fusion.BrigeQcInfo)
}
BrigeQcInfo::BrigeQcInfo(const BrigeQcInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      qcscopecoordinate_(from.qcscopecoordinate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qcno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qcno()) {
    qcno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qcno_);
  }
  if (from.has_qccenterpos()) {
    qccenterpos_ = new ::atd::taskmanager::fusion::Point(*from.qccenterpos_);
  } else {
    qccenterpos_ = NULL;
  }
  qcheading_ = from.qcheading_;
  // @@protoc_insertion_point(copy_constructor:atd.taskmanager.fusion.BrigeQcInfo)
}

void BrigeQcInfo::SharedCtor() {
  _cached_size_ = 0;
  qcno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&qccenterpos_, 0, reinterpret_cast<char*>(&qcheading_) -
    reinterpret_cast<char*>(&qccenterpos_) + sizeof(qcheading_));
}

BrigeQcInfo::~BrigeQcInfo() {
  // @@protoc_insertion_point(destructor:atd.taskmanager.fusion.BrigeQcInfo)
  SharedDtor();
}

void BrigeQcInfo::SharedDtor() {
  qcno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete qccenterpos_;
  }
}

void BrigeQcInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BrigeQcInfo& BrigeQcInfo::default_instance() {
  protobuf_taskmanager_5ffusion_2eproto::InitDefaults();
  return *internal_default_instance();
}

BrigeQcInfo* BrigeQcInfo::New(::google::protobuf::Arena* arena) const {
  BrigeQcInfo* n = new BrigeQcInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrigeQcInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.taskmanager.fusion.BrigeQcInfo)
  qcscopecoordinate_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_qcno()) {
      GOOGLE_DCHECK(!qcno_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*qcno_.UnsafeRawStringPointer())->clear();
    }
    if (has_qccenterpos()) {
      GOOGLE_DCHECK(qccenterpos_ != NULL);
      qccenterpos_->::atd::taskmanager::fusion::Point::Clear();
    }
  }
  qcheading_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BrigeQcInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.taskmanager.fusion.BrigeQcInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string qcNo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qcno()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double qcHeading = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_qcheading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qcheading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.taskmanager.fusion.Point qcCenterPos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qccenterpos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.taskmanager.fusion.Point qcScopeCoordinate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_qcscopecoordinate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.taskmanager.fusion.BrigeQcInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.taskmanager.fusion.BrigeQcInfo)
  return false;
#undef DO_
}

void BrigeQcInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.taskmanager.fusion.BrigeQcInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string qcNo = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->qcno(), output);
  }

  // optional double qcHeading = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->qcheading(), output);
  }

  // optional .atd.taskmanager.fusion.Point qcCenterPos = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->qccenterpos_, output);
  }

  // repeated .atd.taskmanager.fusion.Point qcScopeCoordinate = 4;
  for (unsigned int i = 0, n = this->qcscopecoordinate_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->qcscopecoordinate(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.taskmanager.fusion.BrigeQcInfo)
}

size_t BrigeQcInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.taskmanager.fusion.BrigeQcInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.taskmanager.fusion.Point qcScopeCoordinate = 4;
  {
    unsigned int count = this->qcscopecoordinate_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qcscopecoordinate(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string qcNo = 1;
    if (has_qcno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qcno());
    }

    // optional .atd.taskmanager.fusion.Point qcCenterPos = 3;
    if (has_qccenterpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->qccenterpos_);
    }

    // optional double qcHeading = 2;
    if (has_qcheading()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrigeQcInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BrigeQcInfo*>(&from));
}

void BrigeQcInfo::MergeFrom(const BrigeQcInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.taskmanager.fusion.BrigeQcInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  qcscopecoordinate_.MergeFrom(from.qcscopecoordinate_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_qcno();
      qcno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qcno_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_qccenterpos()->::atd::taskmanager::fusion::Point::MergeFrom(from.qccenterpos());
    }
    if (cached_has_bits & 0x00000004u) {
      qcheading_ = from.qcheading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BrigeQcInfo::CopyFrom(const BrigeQcInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.taskmanager.fusion.BrigeQcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrigeQcInfo::IsInitialized() const {
  return true;
}

void BrigeQcInfo::Swap(BrigeQcInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrigeQcInfo::InternalSwap(BrigeQcInfo* other) {
  qcscopecoordinate_.InternalSwap(&other->qcscopecoordinate_);
  qcno_.Swap(&other->qcno_);
  std::swap(qccenterpos_, other->qccenterpos_);
  std::swap(qcheading_, other->qcheading_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BrigeQcInfo::GetTypeName() const {
  return "atd.taskmanager.fusion.BrigeQcInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrigeQcInfo

// optional string qcNo = 1;
bool BrigeQcInfo::has_qcno() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BrigeQcInfo::set_has_qcno() {
  _has_bits_[0] |= 0x00000001u;
}
void BrigeQcInfo::clear_has_qcno() {
  _has_bits_[0] &= ~0x00000001u;
}
void BrigeQcInfo::clear_qcno() {
  qcno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_qcno();
}
const ::std::string& BrigeQcInfo::qcno() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.BrigeQcInfo.qcNo)
  return qcno_.GetNoArena();
}
void BrigeQcInfo::set_qcno(const ::std::string& value) {
  set_has_qcno();
  qcno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.taskmanager.fusion.BrigeQcInfo.qcNo)
}
#if LANG_CXX11
void BrigeQcInfo::set_qcno(::std::string&& value) {
  set_has_qcno();
  qcno_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.taskmanager.fusion.BrigeQcInfo.qcNo)
}
#endif
void BrigeQcInfo::set_qcno(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_qcno();
  qcno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.taskmanager.fusion.BrigeQcInfo.qcNo)
}
void BrigeQcInfo::set_qcno(const char* value, size_t size) {
  set_has_qcno();
  qcno_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.taskmanager.fusion.BrigeQcInfo.qcNo)
}
::std::string* BrigeQcInfo::mutable_qcno() {
  set_has_qcno();
  // @@protoc_insertion_point(field_mutable:atd.taskmanager.fusion.BrigeQcInfo.qcNo)
  return qcno_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BrigeQcInfo::release_qcno() {
  // @@protoc_insertion_point(field_release:atd.taskmanager.fusion.BrigeQcInfo.qcNo)
  clear_has_qcno();
  return qcno_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BrigeQcInfo::set_allocated_qcno(::std::string* qcno) {
  if (qcno != NULL) {
    set_has_qcno();
  } else {
    clear_has_qcno();
  }
  qcno_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), qcno);
  // @@protoc_insertion_point(field_set_allocated:atd.taskmanager.fusion.BrigeQcInfo.qcNo)
}

// optional double qcHeading = 2;
bool BrigeQcInfo::has_qcheading() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BrigeQcInfo::set_has_qcheading() {
  _has_bits_[0] |= 0x00000004u;
}
void BrigeQcInfo::clear_has_qcheading() {
  _has_bits_[0] &= ~0x00000004u;
}
void BrigeQcInfo::clear_qcheading() {
  qcheading_ = 0;
  clear_has_qcheading();
}
double BrigeQcInfo::qcheading() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.BrigeQcInfo.qcHeading)
  return qcheading_;
}
void BrigeQcInfo::set_qcheading(double value) {
  set_has_qcheading();
  qcheading_ = value;
  // @@protoc_insertion_point(field_set:atd.taskmanager.fusion.BrigeQcInfo.qcHeading)
}

// optional .atd.taskmanager.fusion.Point qcCenterPos = 3;
bool BrigeQcInfo::has_qccenterpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BrigeQcInfo::set_has_qccenterpos() {
  _has_bits_[0] |= 0x00000002u;
}
void BrigeQcInfo::clear_has_qccenterpos() {
  _has_bits_[0] &= ~0x00000002u;
}
void BrigeQcInfo::clear_qccenterpos() {
  if (qccenterpos_ != NULL) qccenterpos_->::atd::taskmanager::fusion::Point::Clear();
  clear_has_qccenterpos();
}
const ::atd::taskmanager::fusion::Point& BrigeQcInfo::qccenterpos() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.BrigeQcInfo.qcCenterPos)
  return qccenterpos_ != NULL ? *qccenterpos_
                         : *::atd::taskmanager::fusion::Point::internal_default_instance();
}
::atd::taskmanager::fusion::Point* BrigeQcInfo::mutable_qccenterpos() {
  set_has_qccenterpos();
  if (qccenterpos_ == NULL) {
    qccenterpos_ = new ::atd::taskmanager::fusion::Point;
  }
  // @@protoc_insertion_point(field_mutable:atd.taskmanager.fusion.BrigeQcInfo.qcCenterPos)
  return qccenterpos_;
}
::atd::taskmanager::fusion::Point* BrigeQcInfo::release_qccenterpos() {
  // @@protoc_insertion_point(field_release:atd.taskmanager.fusion.BrigeQcInfo.qcCenterPos)
  clear_has_qccenterpos();
  ::atd::taskmanager::fusion::Point* temp = qccenterpos_;
  qccenterpos_ = NULL;
  return temp;
}
void BrigeQcInfo::set_allocated_qccenterpos(::atd::taskmanager::fusion::Point* qccenterpos) {
  delete qccenterpos_;
  qccenterpos_ = qccenterpos;
  if (qccenterpos) {
    set_has_qccenterpos();
  } else {
    clear_has_qccenterpos();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.taskmanager.fusion.BrigeQcInfo.qcCenterPos)
}

// repeated .atd.taskmanager.fusion.Point qcScopeCoordinate = 4;
int BrigeQcInfo::qcscopecoordinate_size() const {
  return qcscopecoordinate_.size();
}
void BrigeQcInfo::clear_qcscopecoordinate() {
  qcscopecoordinate_.Clear();
}
const ::atd::taskmanager::fusion::Point& BrigeQcInfo::qcscopecoordinate(int index) const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.BrigeQcInfo.qcScopeCoordinate)
  return qcscopecoordinate_.Get(index);
}
::atd::taskmanager::fusion::Point* BrigeQcInfo::mutable_qcscopecoordinate(int index) {
  // @@protoc_insertion_point(field_mutable:atd.taskmanager.fusion.BrigeQcInfo.qcScopeCoordinate)
  return qcscopecoordinate_.Mutable(index);
}
::atd::taskmanager::fusion::Point* BrigeQcInfo::add_qcscopecoordinate() {
  // @@protoc_insertion_point(field_add:atd.taskmanager.fusion.BrigeQcInfo.qcScopeCoordinate)
  return qcscopecoordinate_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::taskmanager::fusion::Point >*
BrigeQcInfo::mutable_qcscopecoordinate() {
  // @@protoc_insertion_point(field_mutable_list:atd.taskmanager.fusion.BrigeQcInfo.qcScopeCoordinate)
  return &qcscopecoordinate_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::taskmanager::fusion::Point >&
BrigeQcInfo::qcscopecoordinate() const {
  // @@protoc_insertion_point(field_list:atd.taskmanager.fusion.BrigeQcInfo.qcScopeCoordinate)
  return qcscopecoordinate_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrigeInfo::kEnableFieldNumber;
const int BrigeInfo::kQcInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrigeInfo::BrigeInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_taskmanager_5ffusion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.taskmanager.fusion.BrigeInfo)
}
BrigeInfo::BrigeInfo(const BrigeInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      qcinfo_(from.qcinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:atd.taskmanager.fusion.BrigeInfo)
}

void BrigeInfo::SharedCtor() {
  _cached_size_ = 0;
  enable_ = false;
}

BrigeInfo::~BrigeInfo() {
  // @@protoc_insertion_point(destructor:atd.taskmanager.fusion.BrigeInfo)
  SharedDtor();
}

void BrigeInfo::SharedDtor() {
}

void BrigeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const BrigeInfo& BrigeInfo::default_instance() {
  protobuf_taskmanager_5ffusion_2eproto::InitDefaults();
  return *internal_default_instance();
}

BrigeInfo* BrigeInfo::New(::google::protobuf::Arena* arena) const {
  BrigeInfo* n = new BrigeInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BrigeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.taskmanager.fusion.BrigeInfo)
  qcinfo_.Clear();
  enable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BrigeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.taskmanager.fusion.BrigeInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_enable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.taskmanager.fusion.BrigeQcInfo qcInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_qcinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.taskmanager.fusion.BrigeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.taskmanager.fusion.BrigeInfo)
  return false;
#undef DO_
}

void BrigeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.taskmanager.fusion.BrigeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // repeated .atd.taskmanager.fusion.BrigeQcInfo qcInfo = 2;
  for (unsigned int i = 0, n = this->qcinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->qcinfo(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.taskmanager.fusion.BrigeInfo)
}

size_t BrigeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.taskmanager.fusion.BrigeInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.taskmanager.fusion.BrigeQcInfo qcInfo = 2;
  {
    unsigned int count = this->qcinfo_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qcinfo(i));
    }
  }

  // optional bool enable = 1;
  if (has_enable()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BrigeInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BrigeInfo*>(&from));
}

void BrigeInfo::MergeFrom(const BrigeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.taskmanager.fusion.BrigeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  qcinfo_.MergeFrom(from.qcinfo_);
  if (from.has_enable()) {
    set_enable(from.enable());
  }
}

void BrigeInfo::CopyFrom(const BrigeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.taskmanager.fusion.BrigeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrigeInfo::IsInitialized() const {
  return true;
}

void BrigeInfo::Swap(BrigeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrigeInfo::InternalSwap(BrigeInfo* other) {
  qcinfo_.InternalSwap(&other->qcinfo_);
  std::swap(enable_, other->enable_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string BrigeInfo::GetTypeName() const {
  return "atd.taskmanager.fusion.BrigeInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BrigeInfo

// optional bool enable = 1;
bool BrigeInfo::has_enable() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BrigeInfo::set_has_enable() {
  _has_bits_[0] |= 0x00000001u;
}
void BrigeInfo::clear_has_enable() {
  _has_bits_[0] &= ~0x00000001u;
}
void BrigeInfo::clear_enable() {
  enable_ = false;
  clear_has_enable();
}
bool BrigeInfo::enable() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.BrigeInfo.enable)
  return enable_;
}
void BrigeInfo::set_enable(bool value) {
  set_has_enable();
  enable_ = value;
  // @@protoc_insertion_point(field_set:atd.taskmanager.fusion.BrigeInfo.enable)
}

// repeated .atd.taskmanager.fusion.BrigeQcInfo qcInfo = 2;
int BrigeInfo::qcinfo_size() const {
  return qcinfo_.size();
}
void BrigeInfo::clear_qcinfo() {
  qcinfo_.Clear();
}
const ::atd::taskmanager::fusion::BrigeQcInfo& BrigeInfo::qcinfo(int index) const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.BrigeInfo.qcInfo)
  return qcinfo_.Get(index);
}
::atd::taskmanager::fusion::BrigeQcInfo* BrigeInfo::mutable_qcinfo(int index) {
  // @@protoc_insertion_point(field_mutable:atd.taskmanager.fusion.BrigeInfo.qcInfo)
  return qcinfo_.Mutable(index);
}
::atd::taskmanager::fusion::BrigeQcInfo* BrigeInfo::add_qcinfo() {
  // @@protoc_insertion_point(field_add:atd.taskmanager.fusion.BrigeInfo.qcInfo)
  return qcinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::taskmanager::fusion::BrigeQcInfo >*
BrigeInfo::mutable_qcinfo() {
  // @@protoc_insertion_point(field_mutable_list:atd.taskmanager.fusion.BrigeInfo.qcInfo)
  return &qcinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::taskmanager::fusion::BrigeQcInfo >&
BrigeInfo::qcinfo() const {
  // @@protoc_insertion_point(field_list:atd.taskmanager.fusion.BrigeInfo.qcInfo)
  return qcinfo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskManager2Fusion::kBlockObstacleInfoFieldNumber;
const int TaskManager2Fusion::kBrigeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskManager2Fusion::TaskManager2Fusion()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_taskmanager_5ffusion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.taskmanager.fusion.TaskManager2Fusion)
}
TaskManager2Fusion::TaskManager2Fusion(const TaskManager2Fusion& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_blockobstacleinfo()) {
    blockobstacleinfo_ = new ::atd::taskmanager::fusion::BlockObstacleInfo(*from.blockobstacleinfo_);
  } else {
    blockobstacleinfo_ = NULL;
  }
  if (from.has_brigeinfo()) {
    brigeinfo_ = new ::atd::taskmanager::fusion::BrigeInfo(*from.brigeinfo_);
  } else {
    brigeinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.taskmanager.fusion.TaskManager2Fusion)
}

void TaskManager2Fusion::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&blockobstacleinfo_, 0, reinterpret_cast<char*>(&brigeinfo_) -
    reinterpret_cast<char*>(&blockobstacleinfo_) + sizeof(brigeinfo_));
}

TaskManager2Fusion::~TaskManager2Fusion() {
  // @@protoc_insertion_point(destructor:atd.taskmanager.fusion.TaskManager2Fusion)
  SharedDtor();
}

void TaskManager2Fusion::SharedDtor() {
  if (this != internal_default_instance()) {
    delete blockobstacleinfo_;
  }
  if (this != internal_default_instance()) {
    delete brigeinfo_;
  }
}

void TaskManager2Fusion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TaskManager2Fusion& TaskManager2Fusion::default_instance() {
  protobuf_taskmanager_5ffusion_2eproto::InitDefaults();
  return *internal_default_instance();
}

TaskManager2Fusion* TaskManager2Fusion::New(::google::protobuf::Arena* arena) const {
  TaskManager2Fusion* n = new TaskManager2Fusion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskManager2Fusion::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.taskmanager.fusion.TaskManager2Fusion)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_blockobstacleinfo()) {
      GOOGLE_DCHECK(blockobstacleinfo_ != NULL);
      blockobstacleinfo_->::atd::taskmanager::fusion::BlockObstacleInfo::Clear();
    }
    if (has_brigeinfo()) {
      GOOGLE_DCHECK(brigeinfo_ != NULL);
      brigeinfo_->::atd::taskmanager::fusion::BrigeInfo::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskManager2Fusion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.taskmanager.fusion.TaskManager2Fusion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.taskmanager.fusion.BlockObstacleInfo blockObstacleInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blockobstacleinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.taskmanager.fusion.BrigeInfo brigeInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brigeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.taskmanager.fusion.TaskManager2Fusion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.taskmanager.fusion.TaskManager2Fusion)
  return false;
#undef DO_
}

void TaskManager2Fusion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.taskmanager.fusion.TaskManager2Fusion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.taskmanager.fusion.BlockObstacleInfo blockObstacleInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->blockobstacleinfo_, output);
  }

  // optional .atd.taskmanager.fusion.BrigeInfo brigeInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->brigeinfo_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.taskmanager.fusion.TaskManager2Fusion)
}

size_t TaskManager2Fusion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.taskmanager.fusion.TaskManager2Fusion)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional .atd.taskmanager.fusion.BlockObstacleInfo blockObstacleInfo = 1;
    if (has_blockobstacleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->blockobstacleinfo_);
    }

    // optional .atd.taskmanager.fusion.BrigeInfo brigeInfo = 2;
    if (has_brigeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->brigeinfo_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskManager2Fusion::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TaskManager2Fusion*>(&from));
}

void TaskManager2Fusion::MergeFrom(const TaskManager2Fusion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.taskmanager.fusion.TaskManager2Fusion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_blockobstacleinfo()->::atd::taskmanager::fusion::BlockObstacleInfo::MergeFrom(from.blockobstacleinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_brigeinfo()->::atd::taskmanager::fusion::BrigeInfo::MergeFrom(from.brigeinfo());
    }
  }
}

void TaskManager2Fusion::CopyFrom(const TaskManager2Fusion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.taskmanager.fusion.TaskManager2Fusion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskManager2Fusion::IsInitialized() const {
  return true;
}

void TaskManager2Fusion::Swap(TaskManager2Fusion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskManager2Fusion::InternalSwap(TaskManager2Fusion* other) {
  std::swap(blockobstacleinfo_, other->blockobstacleinfo_);
  std::swap(brigeinfo_, other->brigeinfo_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TaskManager2Fusion::GetTypeName() const {
  return "atd.taskmanager.fusion.TaskManager2Fusion";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskManager2Fusion

// optional .atd.taskmanager.fusion.BlockObstacleInfo blockObstacleInfo = 1;
bool TaskManager2Fusion::has_blockobstacleinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskManager2Fusion::set_has_blockobstacleinfo() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskManager2Fusion::clear_has_blockobstacleinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskManager2Fusion::clear_blockobstacleinfo() {
  if (blockobstacleinfo_ != NULL) blockobstacleinfo_->::atd::taskmanager::fusion::BlockObstacleInfo::Clear();
  clear_has_blockobstacleinfo();
}
const ::atd::taskmanager::fusion::BlockObstacleInfo& TaskManager2Fusion::blockobstacleinfo() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.TaskManager2Fusion.blockObstacleInfo)
  return blockobstacleinfo_ != NULL ? *blockobstacleinfo_
                         : *::atd::taskmanager::fusion::BlockObstacleInfo::internal_default_instance();
}
::atd::taskmanager::fusion::BlockObstacleInfo* TaskManager2Fusion::mutable_blockobstacleinfo() {
  set_has_blockobstacleinfo();
  if (blockobstacleinfo_ == NULL) {
    blockobstacleinfo_ = new ::atd::taskmanager::fusion::BlockObstacleInfo;
  }
  // @@protoc_insertion_point(field_mutable:atd.taskmanager.fusion.TaskManager2Fusion.blockObstacleInfo)
  return blockobstacleinfo_;
}
::atd::taskmanager::fusion::BlockObstacleInfo* TaskManager2Fusion::release_blockobstacleinfo() {
  // @@protoc_insertion_point(field_release:atd.taskmanager.fusion.TaskManager2Fusion.blockObstacleInfo)
  clear_has_blockobstacleinfo();
  ::atd::taskmanager::fusion::BlockObstacleInfo* temp = blockobstacleinfo_;
  blockobstacleinfo_ = NULL;
  return temp;
}
void TaskManager2Fusion::set_allocated_blockobstacleinfo(::atd::taskmanager::fusion::BlockObstacleInfo* blockobstacleinfo) {
  delete blockobstacleinfo_;
  blockobstacleinfo_ = blockobstacleinfo;
  if (blockobstacleinfo) {
    set_has_blockobstacleinfo();
  } else {
    clear_has_blockobstacleinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.taskmanager.fusion.TaskManager2Fusion.blockObstacleInfo)
}

// optional .atd.taskmanager.fusion.BrigeInfo brigeInfo = 2;
bool TaskManager2Fusion::has_brigeinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskManager2Fusion::set_has_brigeinfo() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskManager2Fusion::clear_has_brigeinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskManager2Fusion::clear_brigeinfo() {
  if (brigeinfo_ != NULL) brigeinfo_->::atd::taskmanager::fusion::BrigeInfo::Clear();
  clear_has_brigeinfo();
}
const ::atd::taskmanager::fusion::BrigeInfo& TaskManager2Fusion::brigeinfo() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.TaskManager2Fusion.brigeInfo)
  return brigeinfo_ != NULL ? *brigeinfo_
                         : *::atd::taskmanager::fusion::BrigeInfo::internal_default_instance();
}
::atd::taskmanager::fusion::BrigeInfo* TaskManager2Fusion::mutable_brigeinfo() {
  set_has_brigeinfo();
  if (brigeinfo_ == NULL) {
    brigeinfo_ = new ::atd::taskmanager::fusion::BrigeInfo;
  }
  // @@protoc_insertion_point(field_mutable:atd.taskmanager.fusion.TaskManager2Fusion.brigeInfo)
  return brigeinfo_;
}
::atd::taskmanager::fusion::BrigeInfo* TaskManager2Fusion::release_brigeinfo() {
  // @@protoc_insertion_point(field_release:atd.taskmanager.fusion.TaskManager2Fusion.brigeInfo)
  clear_has_brigeinfo();
  ::atd::taskmanager::fusion::BrigeInfo* temp = brigeinfo_;
  brigeinfo_ = NULL;
  return temp;
}
void TaskManager2Fusion::set_allocated_brigeinfo(::atd::taskmanager::fusion::BrigeInfo* brigeinfo) {
  delete brigeinfo_;
  brigeinfo_ = brigeinfo;
  if (brigeinfo) {
    set_has_brigeinfo();
  } else {
    clear_has_brigeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.taskmanager.fusion.TaskManager2Fusion.brigeInfo)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteInfo::kVehicleIdFieldNumber;
const int RouteInfo::kVehicleTypeFieldNumber;
const int RouteInfo::kCenterCoordinateFieldNumber;
const int RouteInfo::kCoordinateTimeFieldNumber;
const int RouteInfo::kRouteFieldNumber;
const int RouteInfo::kRouteTimeFieldNumber;
const int RouteInfo::kSpeedFieldNumber;
const int RouteInfo::kHeadingFieldNumber;
const int RouteInfo::kWorkingModeFieldNumber;
const int RouteInfo::kTaskTypeFieldNumber;
const int RouteInfo::kAxisAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteInfo::RouteInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_taskmanager_5ffusion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.taskmanager.fusion.RouteInfo)
}
RouteInfo::RouteInfo(const RouteInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      route_(from.route_),
      axisangle_(from.axisangle_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vehicleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vehicleid()) {
    vehicleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleid_);
  }
  vehicletype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vehicletype()) {
    vehicletype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicletype_);
  }
  if (from.has_centercoordinate()) {
    centercoordinate_ = new ::atd::taskmanager::fusion::Point(*from.centercoordinate_);
  } else {
    centercoordinate_ = NULL;
  }
  ::memcpy(&coordinatetime_, &from.coordinatetime_,
    reinterpret_cast<char*>(&tasktype_) -
    reinterpret_cast<char*>(&coordinatetime_) + sizeof(tasktype_));
  // @@protoc_insertion_point(copy_constructor:atd.taskmanager.fusion.RouteInfo)
}

void RouteInfo::SharedCtor() {
  _cached_size_ = 0;
  vehicleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicletype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&centercoordinate_, 0, reinterpret_cast<char*>(&tasktype_) -
    reinterpret_cast<char*>(&centercoordinate_) + sizeof(tasktype_));
}

RouteInfo::~RouteInfo() {
  // @@protoc_insertion_point(destructor:atd.taskmanager.fusion.RouteInfo)
  SharedDtor();
}

void RouteInfo::SharedDtor() {
  vehicleid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicletype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete centercoordinate_;
  }
}

void RouteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RouteInfo& RouteInfo::default_instance() {
  protobuf_taskmanager_5ffusion_2eproto::InitDefaults();
  return *internal_default_instance();
}

RouteInfo* RouteInfo::New(::google::protobuf::Arena* arena) const {
  RouteInfo* n = new RouteInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.taskmanager.fusion.RouteInfo)
  route_.Clear();
  axisangle_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_vehicleid()) {
      GOOGLE_DCHECK(!vehicleid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vehicleid_.UnsafeRawStringPointer())->clear();
    }
    if (has_vehicletype()) {
      GOOGLE_DCHECK(!vehicletype_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*vehicletype_.UnsafeRawStringPointer())->clear();
    }
    if (has_centercoordinate()) {
      GOOGLE_DCHECK(centercoordinate_ != NULL);
      centercoordinate_->::atd::taskmanager::fusion::Point::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&coordinatetime_, 0, reinterpret_cast<char*>(&workingmode_) -
      reinterpret_cast<char*>(&coordinatetime_) + sizeof(workingmode_));
  }
  tasktype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RouteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.taskmanager.fusion.RouteInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vehicleId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicleid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vehicleType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicletype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.taskmanager.fusion.Point centerCoordinate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_centercoordinate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 coordinateTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_coordinatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coordinatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.taskmanager.fusion.Point route = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_route()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 routeTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_routetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &routetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heading = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 workingMode = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_workingmode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workingmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 taskType = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_tasktype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasktype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double axisAngle = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 89u, input, this->mutable_axisangle())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(90u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_axisangle())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.taskmanager.fusion.RouteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.taskmanager.fusion.RouteInfo)
  return false;
#undef DO_
}

void RouteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.taskmanager.fusion.RouteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vehicleId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vehicleid(), output);
  }

  // optional string vehicleType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vehicletype(), output);
  }

  // optional .atd.taskmanager.fusion.Point centerCoordinate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->centercoordinate_, output);
  }

  // optional int64 coordinateTime = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->coordinatetime(), output);
  }

  // repeated .atd.taskmanager.fusion.Point route = 5;
  for (unsigned int i = 0, n = this->route_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->route(i), output);
  }

  // optional int64 routeTime = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->routetime(), output);
  }

  // optional float speed = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->speed(), output);
  }

  // optional float heading = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->heading(), output);
  }

  // optional int32 workingMode = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->workingmode(), output);
  }

  // optional int32 taskType = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->tasktype(), output);
  }

  // repeated double axisAngle = 11;
  for (int i = 0, n = this->axisangle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      11, this->axisangle(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.taskmanager.fusion.RouteInfo)
}

size_t RouteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.taskmanager.fusion.RouteInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.taskmanager.fusion.Point route = 5;
  {
    unsigned int count = this->route_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->route(i));
    }
  }

  // repeated double axisAngle = 11;
  {
    unsigned int count = this->axisangle_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->axisangle_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string vehicleId = 1;
    if (has_vehicleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vehicleid());
    }

    // optional string vehicleType = 2;
    if (has_vehicletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vehicletype());
    }

    // optional .atd.taskmanager.fusion.Point centerCoordinate = 3;
    if (has_centercoordinate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->centercoordinate_);
    }

    // optional int64 coordinateTime = 4;
    if (has_coordinatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coordinatetime());
    }

    // optional int64 routeTime = 6;
    if (has_routetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->routetime());
    }

    // optional float speed = 7;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional float heading = 8;
    if (has_heading()) {
      total_size += 1 + 4;
    }

    // optional int32 workingMode = 9;
    if (has_workingmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->workingmode());
    }

  }
  // optional int32 taskType = 10;
  if (has_tasktype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tasktype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RouteInfo*>(&from));
}

void RouteInfo::MergeFrom(const RouteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.taskmanager.fusion.RouteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  route_.MergeFrom(from.route_);
  axisangle_.MergeFrom(from.axisangle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_vehicleid();
      vehicleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_vehicletype();
      vehicletype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicletype_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_centercoordinate()->::atd::taskmanager::fusion::Point::MergeFrom(from.centercoordinate());
    }
    if (cached_has_bits & 0x00000008u) {
      coordinatetime_ = from.coordinatetime_;
    }
    if (cached_has_bits & 0x00000010u) {
      routetime_ = from.routetime_;
    }
    if (cached_has_bits & 0x00000020u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000040u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000080u) {
      workingmode_ = from.workingmode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_tasktype(from.tasktype());
  }
}

void RouteInfo::CopyFrom(const RouteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.taskmanager.fusion.RouteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteInfo::IsInitialized() const {
  return true;
}

void RouteInfo::Swap(RouteInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteInfo::InternalSwap(RouteInfo* other) {
  route_.InternalSwap(&other->route_);
  axisangle_.InternalSwap(&other->axisangle_);
  vehicleid_.Swap(&other->vehicleid_);
  vehicletype_.Swap(&other->vehicletype_);
  std::swap(centercoordinate_, other->centercoordinate_);
  std::swap(coordinatetime_, other->coordinatetime_);
  std::swap(routetime_, other->routetime_);
  std::swap(speed_, other->speed_);
  std::swap(heading_, other->heading_);
  std::swap(workingmode_, other->workingmode_);
  std::swap(tasktype_, other->tasktype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RouteInfo::GetTypeName() const {
  return "atd.taskmanager.fusion.RouteInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouteInfo

// optional string vehicleId = 1;
bool RouteInfo::has_vehicleid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RouteInfo::set_has_vehicleid() {
  _has_bits_[0] |= 0x00000001u;
}
void RouteInfo::clear_has_vehicleid() {
  _has_bits_[0] &= ~0x00000001u;
}
void RouteInfo::clear_vehicleid() {
  vehicleid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vehicleid();
}
const ::std::string& RouteInfo::vehicleid() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.RouteInfo.vehicleId)
  return vehicleid_.GetNoArena();
}
void RouteInfo::set_vehicleid(const ::std::string& value) {
  set_has_vehicleid();
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.taskmanager.fusion.RouteInfo.vehicleId)
}
#if LANG_CXX11
void RouteInfo::set_vehicleid(::std::string&& value) {
  set_has_vehicleid();
  vehicleid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.taskmanager.fusion.RouteInfo.vehicleId)
}
#endif
void RouteInfo::set_vehicleid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vehicleid();
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.taskmanager.fusion.RouteInfo.vehicleId)
}
void RouteInfo::set_vehicleid(const char* value, size_t size) {
  set_has_vehicleid();
  vehicleid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.taskmanager.fusion.RouteInfo.vehicleId)
}
::std::string* RouteInfo::mutable_vehicleid() {
  set_has_vehicleid();
  // @@protoc_insertion_point(field_mutable:atd.taskmanager.fusion.RouteInfo.vehicleId)
  return vehicleid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouteInfo::release_vehicleid() {
  // @@protoc_insertion_point(field_release:atd.taskmanager.fusion.RouteInfo.vehicleId)
  clear_has_vehicleid();
  return vehicleid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RouteInfo::set_allocated_vehicleid(::std::string* vehicleid) {
  if (vehicleid != NULL) {
    set_has_vehicleid();
  } else {
    clear_has_vehicleid();
  }
  vehicleid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicleid);
  // @@protoc_insertion_point(field_set_allocated:atd.taskmanager.fusion.RouteInfo.vehicleId)
}

// optional string vehicleType = 2;
bool RouteInfo::has_vehicletype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RouteInfo::set_has_vehicletype() {
  _has_bits_[0] |= 0x00000002u;
}
void RouteInfo::clear_has_vehicletype() {
  _has_bits_[0] &= ~0x00000002u;
}
void RouteInfo::clear_vehicletype() {
  vehicletype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vehicletype();
}
const ::std::string& RouteInfo::vehicletype() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.RouteInfo.vehicleType)
  return vehicletype_.GetNoArena();
}
void RouteInfo::set_vehicletype(const ::std::string& value) {
  set_has_vehicletype();
  vehicletype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.taskmanager.fusion.RouteInfo.vehicleType)
}
#if LANG_CXX11
void RouteInfo::set_vehicletype(::std::string&& value) {
  set_has_vehicletype();
  vehicletype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.taskmanager.fusion.RouteInfo.vehicleType)
}
#endif
void RouteInfo::set_vehicletype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_vehicletype();
  vehicletype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.taskmanager.fusion.RouteInfo.vehicleType)
}
void RouteInfo::set_vehicletype(const char* value, size_t size) {
  set_has_vehicletype();
  vehicletype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.taskmanager.fusion.RouteInfo.vehicleType)
}
::std::string* RouteInfo::mutable_vehicletype() {
  set_has_vehicletype();
  // @@protoc_insertion_point(field_mutable:atd.taskmanager.fusion.RouteInfo.vehicleType)
  return vehicletype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RouteInfo::release_vehicletype() {
  // @@protoc_insertion_point(field_release:atd.taskmanager.fusion.RouteInfo.vehicleType)
  clear_has_vehicletype();
  return vehicletype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RouteInfo::set_allocated_vehicletype(::std::string* vehicletype) {
  if (vehicletype != NULL) {
    set_has_vehicletype();
  } else {
    clear_has_vehicletype();
  }
  vehicletype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicletype);
  // @@protoc_insertion_point(field_set_allocated:atd.taskmanager.fusion.RouteInfo.vehicleType)
}

// optional .atd.taskmanager.fusion.Point centerCoordinate = 3;
bool RouteInfo::has_centercoordinate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RouteInfo::set_has_centercoordinate() {
  _has_bits_[0] |= 0x00000004u;
}
void RouteInfo::clear_has_centercoordinate() {
  _has_bits_[0] &= ~0x00000004u;
}
void RouteInfo::clear_centercoordinate() {
  if (centercoordinate_ != NULL) centercoordinate_->::atd::taskmanager::fusion::Point::Clear();
  clear_has_centercoordinate();
}
const ::atd::taskmanager::fusion::Point& RouteInfo::centercoordinate() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.RouteInfo.centerCoordinate)
  return centercoordinate_ != NULL ? *centercoordinate_
                         : *::atd::taskmanager::fusion::Point::internal_default_instance();
}
::atd::taskmanager::fusion::Point* RouteInfo::mutable_centercoordinate() {
  set_has_centercoordinate();
  if (centercoordinate_ == NULL) {
    centercoordinate_ = new ::atd::taskmanager::fusion::Point;
  }
  // @@protoc_insertion_point(field_mutable:atd.taskmanager.fusion.RouteInfo.centerCoordinate)
  return centercoordinate_;
}
::atd::taskmanager::fusion::Point* RouteInfo::release_centercoordinate() {
  // @@protoc_insertion_point(field_release:atd.taskmanager.fusion.RouteInfo.centerCoordinate)
  clear_has_centercoordinate();
  ::atd::taskmanager::fusion::Point* temp = centercoordinate_;
  centercoordinate_ = NULL;
  return temp;
}
void RouteInfo::set_allocated_centercoordinate(::atd::taskmanager::fusion::Point* centercoordinate) {
  delete centercoordinate_;
  centercoordinate_ = centercoordinate;
  if (centercoordinate) {
    set_has_centercoordinate();
  } else {
    clear_has_centercoordinate();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.taskmanager.fusion.RouteInfo.centerCoordinate)
}

// optional int64 coordinateTime = 4;
bool RouteInfo::has_coordinatetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RouteInfo::set_has_coordinatetime() {
  _has_bits_[0] |= 0x00000008u;
}
void RouteInfo::clear_has_coordinatetime() {
  _has_bits_[0] &= ~0x00000008u;
}
void RouteInfo::clear_coordinatetime() {
  coordinatetime_ = GOOGLE_LONGLONG(0);
  clear_has_coordinatetime();
}
::google::protobuf::int64 RouteInfo::coordinatetime() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.RouteInfo.coordinateTime)
  return coordinatetime_;
}
void RouteInfo::set_coordinatetime(::google::protobuf::int64 value) {
  set_has_coordinatetime();
  coordinatetime_ = value;
  // @@protoc_insertion_point(field_set:atd.taskmanager.fusion.RouteInfo.coordinateTime)
}

// repeated .atd.taskmanager.fusion.Point route = 5;
int RouteInfo::route_size() const {
  return route_.size();
}
void RouteInfo::clear_route() {
  route_.Clear();
}
const ::atd::taskmanager::fusion::Point& RouteInfo::route(int index) const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.RouteInfo.route)
  return route_.Get(index);
}
::atd::taskmanager::fusion::Point* RouteInfo::mutable_route(int index) {
  // @@protoc_insertion_point(field_mutable:atd.taskmanager.fusion.RouteInfo.route)
  return route_.Mutable(index);
}
::atd::taskmanager::fusion::Point* RouteInfo::add_route() {
  // @@protoc_insertion_point(field_add:atd.taskmanager.fusion.RouteInfo.route)
  return route_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::taskmanager::fusion::Point >*
RouteInfo::mutable_route() {
  // @@protoc_insertion_point(field_mutable_list:atd.taskmanager.fusion.RouteInfo.route)
  return &route_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::taskmanager::fusion::Point >&
RouteInfo::route() const {
  // @@protoc_insertion_point(field_list:atd.taskmanager.fusion.RouteInfo.route)
  return route_;
}

// optional int64 routeTime = 6;
bool RouteInfo::has_routetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RouteInfo::set_has_routetime() {
  _has_bits_[0] |= 0x00000010u;
}
void RouteInfo::clear_has_routetime() {
  _has_bits_[0] &= ~0x00000010u;
}
void RouteInfo::clear_routetime() {
  routetime_ = GOOGLE_LONGLONG(0);
  clear_has_routetime();
}
::google::protobuf::int64 RouteInfo::routetime() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.RouteInfo.routeTime)
  return routetime_;
}
void RouteInfo::set_routetime(::google::protobuf::int64 value) {
  set_has_routetime();
  routetime_ = value;
  // @@protoc_insertion_point(field_set:atd.taskmanager.fusion.RouteInfo.routeTime)
}

// optional float speed = 7;
bool RouteInfo::has_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RouteInfo::set_has_speed() {
  _has_bits_[0] |= 0x00000020u;
}
void RouteInfo::clear_has_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
void RouteInfo::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
float RouteInfo::speed() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.RouteInfo.speed)
  return speed_;
}
void RouteInfo::set_speed(float value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:atd.taskmanager.fusion.RouteInfo.speed)
}

// optional float heading = 8;
bool RouteInfo::has_heading() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RouteInfo::set_has_heading() {
  _has_bits_[0] |= 0x00000040u;
}
void RouteInfo::clear_has_heading() {
  _has_bits_[0] &= ~0x00000040u;
}
void RouteInfo::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
float RouteInfo::heading() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.RouteInfo.heading)
  return heading_;
}
void RouteInfo::set_heading(float value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:atd.taskmanager.fusion.RouteInfo.heading)
}

// optional int32 workingMode = 9;
bool RouteInfo::has_workingmode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RouteInfo::set_has_workingmode() {
  _has_bits_[0] |= 0x00000080u;
}
void RouteInfo::clear_has_workingmode() {
  _has_bits_[0] &= ~0x00000080u;
}
void RouteInfo::clear_workingmode() {
  workingmode_ = 0;
  clear_has_workingmode();
}
::google::protobuf::int32 RouteInfo::workingmode() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.RouteInfo.workingMode)
  return workingmode_;
}
void RouteInfo::set_workingmode(::google::protobuf::int32 value) {
  set_has_workingmode();
  workingmode_ = value;
  // @@protoc_insertion_point(field_set:atd.taskmanager.fusion.RouteInfo.workingMode)
}

// optional int32 taskType = 10;
bool RouteInfo::has_tasktype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RouteInfo::set_has_tasktype() {
  _has_bits_[0] |= 0x00000100u;
}
void RouteInfo::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000100u;
}
void RouteInfo::clear_tasktype() {
  tasktype_ = 0;
  clear_has_tasktype();
}
::google::protobuf::int32 RouteInfo::tasktype() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.RouteInfo.taskType)
  return tasktype_;
}
void RouteInfo::set_tasktype(::google::protobuf::int32 value) {
  set_has_tasktype();
  tasktype_ = value;
  // @@protoc_insertion_point(field_set:atd.taskmanager.fusion.RouteInfo.taskType)
}

// repeated double axisAngle = 11;
int RouteInfo::axisangle_size() const {
  return axisangle_.size();
}
void RouteInfo::clear_axisangle() {
  axisangle_.Clear();
}
double RouteInfo::axisangle(int index) const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.RouteInfo.axisAngle)
  return axisangle_.Get(index);
}
void RouteInfo::set_axisangle(int index, double value) {
  axisangle_.Set(index, value);
  // @@protoc_insertion_point(field_set:atd.taskmanager.fusion.RouteInfo.axisAngle)
}
void RouteInfo::add_axisangle(double value) {
  axisangle_.Add(value);
  // @@protoc_insertion_point(field_add:atd.taskmanager.fusion.RouteInfo.axisAngle)
}
const ::google::protobuf::RepeatedField< double >&
RouteInfo::axisangle() const {
  // @@protoc_insertion_point(field_list:atd.taskmanager.fusion.RouteInfo.axisAngle)
  return axisangle_;
}
::google::protobuf::RepeatedField< double >*
RouteInfo::mutable_axisangle() {
  // @@protoc_insertion_point(field_mutable_list:atd.taskmanager.fusion.RouteInfo.axisAngle)
  return &axisangle_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultipleVehiclesRoutes::kTimestampFieldNumber;
const int MultipleVehiclesRoutes::kMultipleVehiclesRoutesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultipleVehiclesRoutes::MultipleVehiclesRoutes()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_taskmanager_5ffusion_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.taskmanager.fusion.MultipleVehiclesRoutes)
}
MultipleVehiclesRoutes::MultipleVehiclesRoutes(const MultipleVehiclesRoutes& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      multiplevehiclesroutes_(from.multiplevehiclesroutes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:atd.taskmanager.fusion.MultipleVehiclesRoutes)
}

void MultipleVehiclesRoutes::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
}

MultipleVehiclesRoutes::~MultipleVehiclesRoutes() {
  // @@protoc_insertion_point(destructor:atd.taskmanager.fusion.MultipleVehiclesRoutes)
  SharedDtor();
}

void MultipleVehiclesRoutes::SharedDtor() {
}

void MultipleVehiclesRoutes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MultipleVehiclesRoutes& MultipleVehiclesRoutes::default_instance() {
  protobuf_taskmanager_5ffusion_2eproto::InitDefaults();
  return *internal_default_instance();
}

MultipleVehiclesRoutes* MultipleVehiclesRoutes::New(::google::protobuf::Arena* arena) const {
  MultipleVehiclesRoutes* n = new MultipleVehiclesRoutes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultipleVehiclesRoutes::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.taskmanager.fusion.MultipleVehiclesRoutes)
  multiplevehiclesroutes_.Clear();
  timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultipleVehiclesRoutes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.taskmanager.fusion.MultipleVehiclesRoutes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.taskmanager.fusion.RouteInfo MultipleVehiclesRoutes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_multiplevehiclesroutes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.taskmanager.fusion.MultipleVehiclesRoutes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.taskmanager.fusion.MultipleVehiclesRoutes)
  return false;
#undef DO_
}

void MultipleVehiclesRoutes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.taskmanager.fusion.MultipleVehiclesRoutes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // repeated .atd.taskmanager.fusion.RouteInfo MultipleVehiclesRoutes = 2;
  for (unsigned int i = 0, n = this->multiplevehiclesroutes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->multiplevehiclesroutes(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.taskmanager.fusion.MultipleVehiclesRoutes)
}

size_t MultipleVehiclesRoutes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.taskmanager.fusion.MultipleVehiclesRoutes)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.taskmanager.fusion.RouteInfo MultipleVehiclesRoutes = 2;
  {
    unsigned int count = this->multiplevehiclesroutes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->multiplevehiclesroutes(i));
    }
  }

  // optional int64 timestamp = 1;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultipleVehiclesRoutes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MultipleVehiclesRoutes*>(&from));
}

void MultipleVehiclesRoutes::MergeFrom(const MultipleVehiclesRoutes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.taskmanager.fusion.MultipleVehiclesRoutes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multiplevehiclesroutes_.MergeFrom(from.multiplevehiclesroutes_);
  if (from.has_timestamp()) {
    set_timestamp(from.timestamp());
  }
}

void MultipleVehiclesRoutes::CopyFrom(const MultipleVehiclesRoutes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.taskmanager.fusion.MultipleVehiclesRoutes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultipleVehiclesRoutes::IsInitialized() const {
  return true;
}

void MultipleVehiclesRoutes::Swap(MultipleVehiclesRoutes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultipleVehiclesRoutes::InternalSwap(MultipleVehiclesRoutes* other) {
  multiplevehiclesroutes_.InternalSwap(&other->multiplevehiclesroutes_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MultipleVehiclesRoutes::GetTypeName() const {
  return "atd.taskmanager.fusion.MultipleVehiclesRoutes";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultipleVehiclesRoutes

// optional int64 timestamp = 1;
bool MultipleVehiclesRoutes::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MultipleVehiclesRoutes::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void MultipleVehiclesRoutes::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void MultipleVehiclesRoutes::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 MultipleVehiclesRoutes::timestamp() const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.MultipleVehiclesRoutes.timestamp)
  return timestamp_;
}
void MultipleVehiclesRoutes::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:atd.taskmanager.fusion.MultipleVehiclesRoutes.timestamp)
}

// repeated .atd.taskmanager.fusion.RouteInfo MultipleVehiclesRoutes = 2;
int MultipleVehiclesRoutes::multiplevehiclesroutes_size() const {
  return multiplevehiclesroutes_.size();
}
void MultipleVehiclesRoutes::clear_multiplevehiclesroutes() {
  multiplevehiclesroutes_.Clear();
}
const ::atd::taskmanager::fusion::RouteInfo& MultipleVehiclesRoutes::multiplevehiclesroutes(int index) const {
  // @@protoc_insertion_point(field_get:atd.taskmanager.fusion.MultipleVehiclesRoutes.MultipleVehiclesRoutes)
  return multiplevehiclesroutes_.Get(index);
}
::atd::taskmanager::fusion::RouteInfo* MultipleVehiclesRoutes::mutable_multiplevehiclesroutes(int index) {
  // @@protoc_insertion_point(field_mutable:atd.taskmanager.fusion.MultipleVehiclesRoutes.MultipleVehiclesRoutes)
  return multiplevehiclesroutes_.Mutable(index);
}
::atd::taskmanager::fusion::RouteInfo* MultipleVehiclesRoutes::add_multiplevehiclesroutes() {
  // @@protoc_insertion_point(field_add:atd.taskmanager.fusion.MultipleVehiclesRoutes.MultipleVehiclesRoutes)
  return multiplevehiclesroutes_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::taskmanager::fusion::RouteInfo >*
MultipleVehiclesRoutes::mutable_multiplevehiclesroutes() {
  // @@protoc_insertion_point(field_mutable_list:atd.taskmanager.fusion.MultipleVehiclesRoutes.MultipleVehiclesRoutes)
  return &multiplevehiclesroutes_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::taskmanager::fusion::RouteInfo >&
MultipleVehiclesRoutes::multiplevehiclesroutes() const {
  // @@protoc_insertion_point(field_list:atd.taskmanager.fusion.MultipleVehiclesRoutes.MultipleVehiclesRoutes)
  return multiplevehiclesroutes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace fusion
}  // namespace taskmanager
}  // namespace atd

// @@protoc_insertion_point(global_scope)

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitor_errorCode.proto

#include "monitor_errorCode.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace atd
{
  namespace monitor
  {
    class ErrorCode2MonitorDefaultTypeInternal
    {
    public:
      ::google::protobuf::internal::ExplicitlyConstructed<ErrorCode2Monitor>
        _instance;
    } _ErrorCode2Monitor_default_instance_;
  } // namespace monitor
} // namespace atd
namespace protobuf_monitor_5ferrorCode_2eproto
{
  static void InitDefaultsErrorCode2Monitor()
  {
    GOOGLE_PROTOBUF_VERIFY_VERSION;

    {
      void* ptr = &::atd::monitor::_ErrorCode2Monitor_default_instance_;
      new(ptr)::atd::monitor::ErrorCode2Monitor();
      ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
    }
    ::atd::monitor::ErrorCode2Monitor::InitAsDefaultInstance();
  }

  ::google::protobuf::internal::SCCInfo<0> scc_info_ErrorCode2Monitor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsErrorCode2Monitor}, {}};

  void InitDefaults()
  {
    ::google::protobuf::internal::InitSCC(&scc_info_ErrorCode2Monitor.base);
  }

} // namespace protobuf_monitor_5ferrorCode_2eproto
namespace atd
{
  namespace monitor
  {

    // ===================================================================

    void ErrorCode2Monitor::InitAsDefaultInstance()
    {
    }
#if !defined(_MSC_VER) || _MSC_VER >= 1900
    const int ErrorCode2Monitor::kErrorCodeFieldNumber;
    const int ErrorCode2Monitor::kTimestampFieldNumber;
    const int ErrorCode2Monitor::kCounterFieldNumber;
#endif // !defined(_MSC_VER) || _MSC_VER >= 1900

    ErrorCode2Monitor::ErrorCode2Monitor():
      ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL)
    {
      ::google::protobuf::internal::InitSCC(
        &protobuf_monitor_5ferrorCode_2eproto::scc_info_ErrorCode2Monitor.base);
      SharedCtor();
      // @@protoc_insertion_point(constructor:atd.monitor.ErrorCode2Monitor)
    }
    ErrorCode2Monitor::ErrorCode2Monitor(const ErrorCode2Monitor& from):
      ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      errorcode_(from.errorcode_)
    {
      _internal_metadata_.MergeFrom(from._internal_metadata_);
      ::memcpy(&timestamp_, &from.timestamp_, static_cast<size_t>(reinterpret_cast<char*>(&counter_) - reinterpret_cast<char*>(&timestamp_)) + sizeof(counter_));
      // @@protoc_insertion_point(copy_constructor:atd.monitor.ErrorCode2Monitor)
    }

    void ErrorCode2Monitor::SharedCtor()
    {
      ::memset(&timestamp_, 0, static_cast<size_t>(reinterpret_cast<char*>(&counter_) - reinterpret_cast<char*>(&timestamp_)) + sizeof(counter_));
    }

    ErrorCode2Monitor::~ErrorCode2Monitor()
    {
      // @@protoc_insertion_point(destructor:atd.monitor.ErrorCode2Monitor)
      SharedDtor();
    }

    void ErrorCode2Monitor::SharedDtor()
    {
    }

    void ErrorCode2Monitor::SetCachedSize(int size) const
    {
      _cached_size_.Set(size);
    }
    const ErrorCode2Monitor& ErrorCode2Monitor::default_instance()
    {
      ::google::protobuf::internal::InitSCC(&protobuf_monitor_5ferrorCode_2eproto::scc_info_ErrorCode2Monitor.base);
      return *internal_default_instance();
    }

    void ErrorCode2Monitor::Clear()
    {
      // @@protoc_insertion_point(message_clear_start:atd.monitor.ErrorCode2Monitor)
      ::google::protobuf::uint32 cached_has_bits = 0;
      // Prevent compiler warnings about cached_has_bits being unused
      (void)cached_has_bits;

      errorcode_.Clear();
      cached_has_bits = _has_bits_[0];
      if(cached_has_bits & 3u)
      {
        ::memset(&timestamp_, 0, static_cast<size_t>(reinterpret_cast<char*>(&counter_) - reinterpret_cast<char*>(&timestamp_)) + sizeof(counter_));
      }
      _has_bits_.Clear();
      _internal_metadata_.Clear();
    }

    bool ErrorCode2Monitor::MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input)
    {
#define DO_(EXPRESSION)                \
  if(!GOOGLE_PREDICT_TRUE(EXPRESSION)) \
  goto failure
      ::google::protobuf::uint32                           tag;
      ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
        &_internal_metadata_);
      ::google::protobuf::io::StringOutputStream unknown_fields_output(
        unknown_fields_setter.buffer());
      ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
        &unknown_fields_output,
        false);
      // @@protoc_insertion_point(parse_start:atd.monitor.ErrorCode2Monitor)
      for(;;)
      {
        ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
        tag                                             = p.first;
        if(!p.second)
          goto handle_unusual;
        switch(::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag))
        {
        // repeated int32 errorCode = 1;
        case 1:
        {
          if(static_cast<::google::protobuf::uint8>(tag) ==
             static_cast<::google::protobuf::uint8>(8u /* 8 & 0xFF */))
          {
            DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                 ::google::protobuf::int32,
                 ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              1,
              8u,
              input,
              this->mutable_errorcode())));
          }
          else if(
            static_cast<::google::protobuf::uint8>(tag) ==
            static_cast<::google::protobuf::uint8>(10u /* 10 & 0xFF */))
          {
            DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                 ::google::protobuf::int32,
                 ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input,
              this->mutable_errorcode())));
          }
          else
          {
            goto handle_unusual;
          }
          break;
        }

        // optional uint64 timestamp = 2;
        case 2:
        {
          if(static_cast<::google::protobuf::uint8>(tag) ==
             static_cast<::google::protobuf::uint8>(16u /* 16 & 0xFF */))
          {
            set_has_timestamp();
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                 ::google::protobuf::uint64,
                 ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
              input,
              &timestamp_)));
          }
          else
          {
            goto handle_unusual;
          }
          break;
        }

        // optional int32 counter = 3;
        case 3:
        {
          if(static_cast<::google::protobuf::uint8>(tag) ==
             static_cast<::google::protobuf::uint8>(24u /* 24 & 0xFF */))
          {
            set_has_counter();
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                 ::google::protobuf::int32,
                 ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
              input,
              &counter_)));
          }
          else
          {
            goto handle_unusual;
          }
          break;
        }

        default:
        {
        handle_unusual:
          if(tag == 0)
          {
            goto success;
          }
          DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input,
            tag,
            &unknown_fields_stream));
          break;
        }
        }
      }
    success:
      // @@protoc_insertion_point(parse_success:atd.monitor.ErrorCode2Monitor)
      return true;
    failure:
      // @@protoc_insertion_point(parse_failure:atd.monitor.ErrorCode2Monitor)
      return false;
#undef DO_
    }

    void ErrorCode2Monitor::SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const
    {
      // @@protoc_insertion_point(serialize_start:atd.monitor.ErrorCode2Monitor)
      ::google::protobuf::uint32 cached_has_bits = 0;
      (void)cached_has_bits;

      // repeated int32 errorCode = 1;
      for(int i = 0, n = this->errorcode_size(); i < n; i++)
      {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(
          1,
          this->errorcode(i),
          output);
      }

      cached_has_bits = _has_bits_[0];
      // optional uint64 timestamp = 2;
      if(cached_has_bits & 0x00000001u)
      {
        ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->timestamp(), output);
      }

      // optional int32 counter = 3;
      if(cached_has_bits & 0x00000002u)
      {
        ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->counter(), output);
      }

      output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                       static_cast<int>(_internal_metadata_.unknown_fields().size()));
      // @@protoc_insertion_point(serialize_end:atd.monitor.ErrorCode2Monitor)
    }

    size_t ErrorCode2Monitor::ByteSizeLong() const
    {
      // @@protoc_insertion_point(message_byte_size_start:atd.monitor.ErrorCode2Monitor)
      size_t total_size = 0;

      total_size += _internal_metadata_.unknown_fields().size();

      // repeated int32 errorCode = 1;
      {
        size_t data_size = ::google::protobuf::internal::WireFormatLite::
          Int32Size(this->errorcode_);
        total_size += 1 *
                      ::google::protobuf::internal::FromIntSize(this->errorcode_size());
        total_size += data_size;
      }

      if(_has_bits_[0 / 32] & 3u)
      {
        // optional uint64 timestamp = 2;
        if(has_timestamp())
        {
          total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::UInt64Size(
                          this->timestamp());
        }

        // optional int32 counter = 3;
        if(has_counter())
        {
          total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                          this->counter());
        }
      }
      int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
      SetCachedSize(cached_size);
      return total_size;
    }

    void ErrorCode2Monitor::CheckTypeAndMergeFrom(
      const ::google::protobuf::MessageLite& from)
    {
      MergeFrom(*::google::protobuf::down_cast<const ErrorCode2Monitor*>(&from));
    }

    void ErrorCode2Monitor::MergeFrom(const ErrorCode2Monitor& from)
    {
      // @@protoc_insertion_point(class_specific_merge_from_start:atd.monitor.ErrorCode2Monitor)
      GOOGLE_DCHECK_NE(&from, this);
      _internal_metadata_.MergeFrom(from._internal_metadata_);
      ::google::protobuf::uint32 cached_has_bits = 0;
      (void)cached_has_bits;

      errorcode_.MergeFrom(from.errorcode_);
      cached_has_bits = from._has_bits_[0];
      if(cached_has_bits & 3u)
      {
        if(cached_has_bits & 0x00000001u)
        {
          timestamp_ = from.timestamp_;
        }
        if(cached_has_bits & 0x00000002u)
        {
          counter_ = from.counter_;
        }
        _has_bits_[0] |= cached_has_bits;
      }
    }

    void ErrorCode2Monitor::CopyFrom(const ErrorCode2Monitor& from)
    {
      // @@protoc_insertion_point(class_specific_copy_from_start:atd.monitor.ErrorCode2Monitor)
      if(&from == this)
        return;
      Clear();
      MergeFrom(from);
    }

    bool ErrorCode2Monitor::IsInitialized() const
    {
      return true;
    }

    void ErrorCode2Monitor::Swap(ErrorCode2Monitor* other)
    {
      if(other == this)
        return;
      InternalSwap(other);
    }
    void ErrorCode2Monitor::InternalSwap(ErrorCode2Monitor* other)
    {
      using std::swap;
      errorcode_.InternalSwap(&other->errorcode_);
      swap(timestamp_, other->timestamp_);
      swap(counter_, other->counter_);
      swap(_has_bits_[0], other->_has_bits_[0]);
      _internal_metadata_.Swap(&other->_internal_metadata_);
    }

    ::std::string ErrorCode2Monitor::GetTypeName() const
    {
      return "atd.monitor.ErrorCode2Monitor";
    }

    // @@protoc_insertion_point(namespace_scope)
  } // namespace monitor
} // namespace atd
namespace google
{
  namespace protobuf
  {
    template<>
    GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::atd::monitor::ErrorCode2Monitor* Arena::CreateMaybeMessage<::atd::monitor::ErrorCode2Monitor>(Arena* arena)
    {
      return Arena::CreateInternal<::atd::monitor::ErrorCode2Monitor>(arena);
    }
  } // namespace protobuf
} // namespace google

// @@protoc_insertion_point(global_scope)

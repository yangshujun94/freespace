// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitor_errorCode.proto

#ifndef PROTOBUF_INCLUDED_monitor_5ferrorCode_2eproto
#define PROTOBUF_INCLUDED_monitor_5ferrorCode_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h> // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_monitor_5ferrorCode_2eproto

namespace protobuf_monitor_5ferrorCode_2eproto
{
  // Internal implementation detail -- do not use these members.
  struct TableStruct
  {
    static const ::google::protobuf::internal::ParseTableField          entries[];
    static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
    static const ::google::protobuf::internal::ParseTable               schema[1];
    static const ::google::protobuf::internal::FieldMetadata            field_metadata[];
    static const ::google::protobuf::internal::SerializationTable       serialization_table[];
    static const ::google::protobuf::uint32                             offsets[];
  };
} // namespace protobuf_monitor_5ferrorCode_2eproto
namespace atd
{
  namespace monitor
  {
    class ErrorCode2Monitor;
    class ErrorCode2MonitorDefaultTypeInternal;
    extern ErrorCode2MonitorDefaultTypeInternal _ErrorCode2Monitor_default_instance_;
  } // namespace monitor
} // namespace atd
namespace google
{
  namespace protobuf
  {
    template<>
    ::atd::monitor::ErrorCode2Monitor* Arena::CreateMaybeMessage<::atd::monitor::ErrorCode2Monitor>(Arena*);
  } // namespace protobuf
} // namespace google
namespace atd
{
  namespace monitor
  {

    // ===================================================================

    class ErrorCode2Monitor : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.monitor.ErrorCode2Monitor) */
    {
    public:
      ErrorCode2Monitor();
      virtual ~ErrorCode2Monitor();

      ErrorCode2Monitor(const ErrorCode2Monitor& from);

      inline ErrorCode2Monitor& operator=(const ErrorCode2Monitor& from)
      {
        CopyFrom(from);
        return *this;
      }
#if LANG_CXX11
      ErrorCode2Monitor(ErrorCode2Monitor&& from) noexcept
        :
        ErrorCode2Monitor()
      {
        *this = ::std::move(from);
      }

      inline ErrorCode2Monitor& operator=(ErrorCode2Monitor&& from) noexcept
      {
        if(GetArenaNoVirtual() == from.GetArenaNoVirtual())
        {
          if(this != &from)
            InternalSwap(&from);
        }
        else
        {
          CopyFrom(from);
        }
        return *this;
      }
#endif
      inline const ::std::string& unknown_fields() const
      {
        return _internal_metadata_.unknown_fields();
      }
      inline ::std::string* mutable_unknown_fields()
      {
        return _internal_metadata_.mutable_unknown_fields();
      }

      static const ErrorCode2Monitor& default_instance();

      static void                            InitAsDefaultInstance(); // FOR INTERNAL USE ONLY
      static inline const ErrorCode2Monitor* internal_default_instance()
      {
        return reinterpret_cast<const ErrorCode2Monitor*>(
          &_ErrorCode2Monitor_default_instance_);
      }
      static constexpr int kIndexInFileMessages =
        0;

      void        Swap(ErrorCode2Monitor* other);
      friend void swap(ErrorCode2Monitor& a, ErrorCode2Monitor& b)
      {
        a.Swap(&b);
      }

      // implements Message ----------------------------------------------

      inline ErrorCode2Monitor* New() const final
      {
        return CreateMaybeMessage<ErrorCode2Monitor>(NULL);
      }

      ErrorCode2Monitor* New(::google::protobuf::Arena* arena) const final
      {
        return CreateMaybeMessage<ErrorCode2Monitor>(arena);
      }
      void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
        final;
      void CopyFrom(const ErrorCode2Monitor& from);
      void MergeFrom(const ErrorCode2Monitor& from);
      void Clear() final;
      bool IsInitialized() const final;

      size_t ByteSizeLong() const final;
      bool   MergePartialFromCodedStream(
          ::google::protobuf::io::CodedInputStream* input) final;
      void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const final;
      void DiscardUnknownFields();
      int  GetCachedSize() const final { return _cached_size_.Get(); }

    private:
      void SharedCtor();
      void SharedDtor();
      void SetCachedSize(int size) const;
      void InternalSwap(ErrorCode2Monitor* other);

    private:
      inline ::google::protobuf::Arena* GetArenaNoVirtual() const
      {
        return NULL;
      }
      inline void* MaybeArenaPtr() const
      {
        return NULL;
      }

    public:
      ::std::string GetTypeName() const final;

      // nested types ----------------------------------------------------

      // accessors -------------------------------------------------------

      // repeated int32 errorCode = 1;
      int                       errorcode_size() const;
      void                      clear_errorcode();
      static const int          kErrorCodeFieldNumber = 1;
      ::google::protobuf::int32 errorcode(int index) const;
      void                      set_errorcode(int index, ::google::protobuf::int32 value);
      void                      add_errorcode(::google::protobuf::int32 value);
      const ::google::protobuf::RepeatedField<::google::protobuf::int32>&
      errorcode() const;
      ::google::protobuf::RepeatedField<::google::protobuf::int32>*
      mutable_errorcode();

      // optional uint64 timestamp = 2;
      bool                       has_timestamp() const;
      void                       clear_timestamp();
      static const int           kTimestampFieldNumber = 2;
      ::google::protobuf::uint64 timestamp() const;
      void                       set_timestamp(::google::protobuf::uint64 value);

      // optional int32 counter = 3;
      bool                      has_counter() const;
      void                      clear_counter();
      static const int          kCounterFieldNumber = 3;
      ::google::protobuf::int32 counter() const;
      void                      set_counter(::google::protobuf::int32 value);

      // @@protoc_insertion_point(class_scope:atd.monitor.ErrorCode2Monitor)
    private:
      void set_has_timestamp();
      void clear_has_timestamp();
      void set_has_counter();
      void clear_has_counter();

      ::google::protobuf::internal::InternalMetadataWithArenaLite  _internal_metadata_;
      ::google::protobuf::internal::HasBits<1>                     _has_bits_;
      mutable ::google::protobuf::internal::CachedSize             _cached_size_;
      ::google::protobuf::RepeatedField<::google::protobuf::int32> errorcode_;
      ::google::protobuf::uint64                                   timestamp_;
      ::google::protobuf::int32                                    counter_;
      friend struct ::protobuf_monitor_5ferrorCode_2eproto::TableStruct;
    };
    // ===================================================================

    // ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif // __GNUC__
    // ErrorCode2Monitor

    // repeated int32 errorCode = 1;
    inline int ErrorCode2Monitor::errorcode_size() const
    {
      return errorcode_.size();
    }
    inline void ErrorCode2Monitor::clear_errorcode()
    {
      errorcode_.Clear();
    }
    inline ::google::protobuf::int32 ErrorCode2Monitor::errorcode(int index) const
    {
      // @@protoc_insertion_point(field_get:atd.monitor.ErrorCode2Monitor.errorCode)
      return errorcode_.Get(index);
    }
    inline void ErrorCode2Monitor::set_errorcode(int index, ::google::protobuf::int32 value)
    {
      errorcode_.Set(index, value);
      // @@protoc_insertion_point(field_set:atd.monitor.ErrorCode2Monitor.errorCode)
    }
    inline void ErrorCode2Monitor::add_errorcode(::google::protobuf::int32 value)
    {
      errorcode_.Add(value);
      // @@protoc_insertion_point(field_add:atd.monitor.ErrorCode2Monitor.errorCode)
    }
    inline const ::google::protobuf::RepeatedField<::google::protobuf::int32>&
    ErrorCode2Monitor::errorcode() const
    {
      // @@protoc_insertion_point(field_list:atd.monitor.ErrorCode2Monitor.errorCode)
      return errorcode_;
    }
    inline ::google::protobuf::RepeatedField<::google::protobuf::int32>*
    ErrorCode2Monitor::mutable_errorcode()
    {
      // @@protoc_insertion_point(field_mutable_list:atd.monitor.ErrorCode2Monitor.errorCode)
      return &errorcode_;
    }

    // optional uint64 timestamp = 2;
    inline bool ErrorCode2Monitor::has_timestamp() const
    {
      return (_has_bits_[0] & 0x00000001u) != 0;
    }
    inline void ErrorCode2Monitor::set_has_timestamp()
    {
      _has_bits_[0] |= 0x00000001u;
    }
    inline void ErrorCode2Monitor::clear_has_timestamp()
    {
      _has_bits_[0] &= ~0x00000001u;
    }
    inline void ErrorCode2Monitor::clear_timestamp()
    {
      timestamp_ = GOOGLE_ULONGLONG(0);
      clear_has_timestamp();
    }
    inline ::google::protobuf::uint64 ErrorCode2Monitor::timestamp() const
    {
      // @@protoc_insertion_point(field_get:atd.monitor.ErrorCode2Monitor.timestamp)
      return timestamp_;
    }
    inline void ErrorCode2Monitor::set_timestamp(::google::protobuf::uint64 value)
    {
      set_has_timestamp();
      timestamp_ = value;
      // @@protoc_insertion_point(field_set:atd.monitor.ErrorCode2Monitor.timestamp)
    }

    // optional int32 counter = 3;
    inline bool ErrorCode2Monitor::has_counter() const
    {
      return (_has_bits_[0] & 0x00000002u) != 0;
    }
    inline void ErrorCode2Monitor::set_has_counter()
    {
      _has_bits_[0] |= 0x00000002u;
    }
    inline void ErrorCode2Monitor::clear_has_counter()
    {
      _has_bits_[0] &= ~0x00000002u;
    }
    inline void ErrorCode2Monitor::clear_counter()
    {
      counter_ = 0;
      clear_has_counter();
    }
    inline ::google::protobuf::int32 ErrorCode2Monitor::counter() const
    {
      // @@protoc_insertion_point(field_get:atd.monitor.ErrorCode2Monitor.counter)
      return counter_;
    }
    inline void ErrorCode2Monitor::set_counter(::google::protobuf::int32 value)
    {
      set_has_counter();
      counter_ = value;
      // @@protoc_insertion_point(field_set:atd.monitor.ErrorCode2Monitor.counter)
    }

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif // __GNUC__

    // @@protoc_insertion_point(namespace_scope)

  } // namespace monitor
} // namespace atd

// @@protoc_insertion_point(global_scope)

#endif // PROTOBUF_INCLUDED_monitor_5ferrorCode_2eproto

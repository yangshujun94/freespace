// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: taskmanager_fusion.proto

#include "taskmanager_fusion.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_taskmanager_5ffusion_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_taskmanager_5ffusion_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BayInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_taskmanager_5ffusion_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_taskmanager_5ffusion_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BlockBoxInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_taskmanager_5ffusion_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BlockRtgInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_taskmanager_5ffusion_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BrigeInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_taskmanager_5ffusion_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_BrigeQcInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_taskmanager_5ffusion_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RouteInfo;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_taskmanager_5ffusion_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_BlockObstacleInfo;
}  // namespace protobuf_taskmanager_5ffusion_2eproto
namespace atd {
namespace taskmanager {
namespace fusion {
class PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point>
      _instance;
} _Point_default_instance_;
class BlockRtgInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlockRtgInfo>
      _instance;
} _BlockRtgInfo_default_instance_;
class BayInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BayInfo>
      _instance;
} _BayInfo_default_instance_;
class BlockBoxInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlockBoxInfo>
      _instance;
} _BlockBoxInfo_default_instance_;
class BlockObstacleInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BlockObstacleInfo>
      _instance;
} _BlockObstacleInfo_default_instance_;
class BrigeQcInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BrigeQcInfo>
      _instance;
} _BrigeQcInfo_default_instance_;
class BrigeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BrigeInfo>
      _instance;
} _BrigeInfo_default_instance_;
class TaskManager2FusionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskManager2Fusion>
      _instance;
} _TaskManager2Fusion_default_instance_;
class RouteInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RouteInfo>
      _instance;
} _RouteInfo_default_instance_;
class MultipleVehiclesRoutesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MultipleVehiclesRoutes>
      _instance;
} _MultipleVehiclesRoutes_default_instance_;
}  // namespace fusion
}  // namespace taskmanager
}  // namespace atd
namespace protobuf_taskmanager_5ffusion_2eproto {
static void InitDefaultsPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atd::taskmanager::fusion::_Point_default_instance_;
    new (ptr) ::atd::taskmanager::fusion::Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atd::taskmanager::fusion::Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint}, {}};

static void InitDefaultsBlockRtgInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atd::taskmanager::fusion::_BlockRtgInfo_default_instance_;
    new (ptr) ::atd::taskmanager::fusion::BlockRtgInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atd::taskmanager::fusion::BlockRtgInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BlockRtgInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBlockRtgInfo}, {
      &protobuf_taskmanager_5ffusion_2eproto::scc_info_Point.base,}};

static void InitDefaultsBayInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atd::taskmanager::fusion::_BayInfo_default_instance_;
    new (ptr) ::atd::taskmanager::fusion::BayInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atd::taskmanager::fusion::BayInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BayInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBayInfo}, {}};

static void InitDefaultsBlockBoxInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atd::taskmanager::fusion::_BlockBoxInfo_default_instance_;
    new (ptr) ::atd::taskmanager::fusion::BlockBoxInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atd::taskmanager::fusion::BlockBoxInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BlockBoxInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBlockBoxInfo}, {
      &protobuf_taskmanager_5ffusion_2eproto::scc_info_BayInfo.base,}};

static void InitDefaultsBlockObstacleInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atd::taskmanager::fusion::_BlockObstacleInfo_default_instance_;
    new (ptr) ::atd::taskmanager::fusion::BlockObstacleInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atd::taskmanager::fusion::BlockObstacleInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BlockObstacleInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBlockObstacleInfo}, {
      &protobuf_taskmanager_5ffusion_2eproto::scc_info_BlockRtgInfo.base,
      &protobuf_taskmanager_5ffusion_2eproto::scc_info_BlockBoxInfo.base,}};

static void InitDefaultsBrigeQcInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atd::taskmanager::fusion::_BrigeQcInfo_default_instance_;
    new (ptr) ::atd::taskmanager::fusion::BrigeQcInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atd::taskmanager::fusion::BrigeQcInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BrigeQcInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBrigeQcInfo}, {
      &protobuf_taskmanager_5ffusion_2eproto::scc_info_Point.base,}};

static void InitDefaultsBrigeInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atd::taskmanager::fusion::_BrigeInfo_default_instance_;
    new (ptr) ::atd::taskmanager::fusion::BrigeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atd::taskmanager::fusion::BrigeInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_BrigeInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsBrigeInfo}, {
      &protobuf_taskmanager_5ffusion_2eproto::scc_info_BrigeQcInfo.base,}};

static void InitDefaultsTaskManager2Fusion() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atd::taskmanager::fusion::_TaskManager2Fusion_default_instance_;
    new (ptr) ::atd::taskmanager::fusion::TaskManager2Fusion();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atd::taskmanager::fusion::TaskManager2Fusion::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TaskManager2Fusion =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTaskManager2Fusion}, {
      &protobuf_taskmanager_5ffusion_2eproto::scc_info_BlockObstacleInfo.base,
      &protobuf_taskmanager_5ffusion_2eproto::scc_info_BrigeInfo.base,}};

static void InitDefaultsRouteInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atd::taskmanager::fusion::_RouteInfo_default_instance_;
    new (ptr) ::atd::taskmanager::fusion::RouteInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atd::taskmanager::fusion::RouteInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RouteInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRouteInfo}, {
      &protobuf_taskmanager_5ffusion_2eproto::scc_info_Point.base,}};

static void InitDefaultsMultipleVehiclesRoutes() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::atd::taskmanager::fusion::_MultipleVehiclesRoutes_default_instance_;
    new (ptr) ::atd::taskmanager::fusion::MultipleVehiclesRoutes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::atd::taskmanager::fusion::MultipleVehiclesRoutes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MultipleVehiclesRoutes =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMultipleVehiclesRoutes}, {
      &protobuf_taskmanager_5ffusion_2eproto::scc_info_RouteInfo.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BlockRtgInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BayInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BlockBoxInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BlockObstacleInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BrigeQcInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BrigeInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskManager2Fusion.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RouteInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MultipleVehiclesRoutes.base);
}

}  // namespace protobuf_taskmanager_5ffusion_2eproto
namespace atd {
namespace taskmanager {
namespace fusion {

// ===================================================================

void Point::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kLongitudeFieldNumber;
const int Point::kLatitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_taskmanager_5ffusion_2eproto::scc_info_Point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.taskmanager.fusion.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:atd.taskmanager.fusion.Point)
}

void Point::SharedCtor() {
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:atd.taskmanager.fusion.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_taskmanager_5ffusion_2eproto::scc_info_Point.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.taskmanager.fusion.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&longitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latitude_) -
        reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:atd.taskmanager.fusion.Point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double longitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.taskmanager.fusion.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.taskmanager.fusion.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.taskmanager.fusion.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double longitude = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->longitude(), output);
  }

  // optional double latitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->latitude(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.taskmanager.fusion.Point)
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.taskmanager.fusion.Point)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional double longitude = 1;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional double latitude = 2;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Point*>(&from));
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.taskmanager.fusion.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      latitude_ = from.latitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.taskmanager.fusion.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  using std::swap;
  swap(longitude_, other->longitude_);
  swap(latitude_, other->latitude_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Point::GetTypeName() const {
  return "atd.taskmanager.fusion.Point";
}


// ===================================================================

void BlockRtgInfo::InitAsDefaultInstance() {
  ::atd::taskmanager::fusion::_BlockRtgInfo_default_instance_._instance.get_mutable()->rtgcenterpos_ = const_cast< ::atd::taskmanager::fusion::Point*>(
      ::atd::taskmanager::fusion::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockRtgInfo::kRtgNoFieldNumber;
const int BlockRtgInfo::kRtgCenterPosFieldNumber;
const int BlockRtgInfo::kRtgScopeCoordinateFieldNumber;
const int BlockRtgInfo::kNTimeStampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockRtgInfo::BlockRtgInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_taskmanager_5ffusion_2eproto::scc_info_BlockRtgInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.taskmanager.fusion.BlockRtgInfo)
}
BlockRtgInfo::BlockRtgInfo(const BlockRtgInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      rtgscopecoordinate_(from.rtgscopecoordinate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rtgno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_rtgno()) {
    rtgno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtgno_);
  }
  if (from.has_rtgcenterpos()) {
    rtgcenterpos_ = new ::atd::taskmanager::fusion::Point(*from.rtgcenterpos_);
  } else {
    rtgcenterpos_ = NULL;
  }
  ntimestamp_ = from.ntimestamp_;
  // @@protoc_insertion_point(copy_constructor:atd.taskmanager.fusion.BlockRtgInfo)
}

void BlockRtgInfo::SharedCtor() {
  rtgno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rtgcenterpos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ntimestamp_) -
      reinterpret_cast<char*>(&rtgcenterpos_)) + sizeof(ntimestamp_));
}

BlockRtgInfo::~BlockRtgInfo() {
  // @@protoc_insertion_point(destructor:atd.taskmanager.fusion.BlockRtgInfo)
  SharedDtor();
}

void BlockRtgInfo::SharedDtor() {
  rtgno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rtgcenterpos_;
}

void BlockRtgInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockRtgInfo& BlockRtgInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_taskmanager_5ffusion_2eproto::scc_info_BlockRtgInfo.base);
  return *internal_default_instance();
}


void BlockRtgInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.taskmanager.fusion.BlockRtgInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rtgscopecoordinate_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      rtgno_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rtgcenterpos_ != NULL);
      rtgcenterpos_->Clear();
    }
  }
  ntimestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlockRtgInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:atd.taskmanager.fusion.BlockRtgInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string rtgNo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rtgno()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.taskmanager.fusion.Point rtgCenterPos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rtgcenterpos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.taskmanager.fusion.Point rtgScopeCoordinate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rtgscopecoordinate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 nTimeStamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ntimestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ntimestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.taskmanager.fusion.BlockRtgInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.taskmanager.fusion.BlockRtgInfo)
  return false;
#undef DO_
}

void BlockRtgInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.taskmanager.fusion.BlockRtgInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string rtgNo = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->rtgno(), output);
  }

  // optional .atd.taskmanager.fusion.Point rtgCenterPos = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_rtgcenterpos(), output);
  }

  // repeated .atd.taskmanager.fusion.Point rtgScopeCoordinate = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rtgscopecoordinate_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->rtgscopecoordinate(static_cast<int>(i)),
      output);
  }

  // optional int64 nTimeStamp = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->ntimestamp(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.taskmanager.fusion.BlockRtgInfo)
}

size_t BlockRtgInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.taskmanager.fusion.BlockRtgInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .atd.taskmanager.fusion.Point rtgScopeCoordinate = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->rtgscopecoordinate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rtgscopecoordinate(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string rtgNo = 1;
    if (has_rtgno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rtgno());
    }

    // optional .atd.taskmanager.fusion.Point rtgCenterPos = 2;
    if (has_rtgcenterpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rtgcenterpos_);
    }

    // optional int64 nTimeStamp = 4;
    if (has_ntimestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ntimestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockRtgInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BlockRtgInfo*>(&from));
}

void BlockRtgInfo::MergeFrom(const BlockRtgInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.taskmanager.fusion.BlockRtgInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rtgscopecoordinate_.MergeFrom(from.rtgscopecoordinate_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_rtgno();
      rtgno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.rtgno_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_rtgcenterpos()->::atd::taskmanager::fusion::Point::MergeFrom(from.rtgcenterpos());
    }
    if (cached_has_bits & 0x00000004u) {
      ntimestamp_ = from.ntimestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlockRtgInfo::CopyFrom(const BlockRtgInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.taskmanager.fusion.BlockRtgInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockRtgInfo::IsInitialized() const {
  return true;
}

void BlockRtgInfo::Swap(BlockRtgInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockRtgInfo::InternalSwap(BlockRtgInfo* other) {
  using std::swap;
  CastToBase(&rtgscopecoordinate_)->InternalSwap(CastToBase(&other->rtgscopecoordinate_));
  rtgno_.Swap(&other->rtgno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rtgcenterpos_, other->rtgcenterpos_);
  swap(ntimestamp_, other->ntimestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BlockRtgInfo::GetTypeName() const {
  return "atd.taskmanager.fusion.BlockRtgInfo";
}


// ===================================================================

void BayInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BayInfo::kBayFieldNumber;
const int BayInfo::kRowFieldNumber;
const int BayInfo::kHasBoxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BayInfo::BayInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_taskmanager_5ffusion_2eproto::scc_info_BayInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.taskmanager.fusion.BayInfo)
}
BayInfo::BayInfo(const BayInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bay_, &from.bay_,
    static_cast<size_t>(reinterpret_cast<char*>(&hasbox_) -
    reinterpret_cast<char*>(&bay_)) + sizeof(hasbox_));
  // @@protoc_insertion_point(copy_constructor:atd.taskmanager.fusion.BayInfo)
}

void BayInfo::SharedCtor() {
  ::memset(&bay_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hasbox_) -
      reinterpret_cast<char*>(&bay_)) + sizeof(hasbox_));
}

BayInfo::~BayInfo() {
  // @@protoc_insertion_point(destructor:atd.taskmanager.fusion.BayInfo)
  SharedDtor();
}

void BayInfo::SharedDtor() {
}

void BayInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BayInfo& BayInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_taskmanager_5ffusion_2eproto::scc_info_BayInfo.base);
  return *internal_default_instance();
}


void BayInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.taskmanager.fusion.BayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&bay_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hasbox_) -
        reinterpret_cast<char*>(&bay_)) + sizeof(hasbox_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:atd.taskmanager.fusion.BayInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bay = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_bay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 row = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_row();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool hasBox = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_hasbox();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasbox_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.taskmanager.fusion.BayInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.taskmanager.fusion.BayInfo)
  return false;
#undef DO_
}

void BayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.taskmanager.fusion.BayInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 bay = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bay(), output);
  }

  // optional int32 row = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->row(), output);
  }

  // optional bool hasBox = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->hasbox(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.taskmanager.fusion.BayInfo)
}

size_t BayInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.taskmanager.fusion.BayInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 bay = 1;
    if (has_bay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bay());
    }

    // optional int32 row = 2;
    if (has_row()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->row());
    }

    // optional bool hasBox = 3;
    if (has_hasbox()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BayInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BayInfo*>(&from));
}

void BayInfo::MergeFrom(const BayInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.taskmanager.fusion.BayInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      bay_ = from.bay_;
    }
    if (cached_has_bits & 0x00000002u) {
      row_ = from.row_;
    }
    if (cached_has_bits & 0x00000004u) {
      hasbox_ = from.hasbox_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BayInfo::CopyFrom(const BayInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.taskmanager.fusion.BayInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BayInfo::IsInitialized() const {
  return true;
}

void BayInfo::Swap(BayInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BayInfo::InternalSwap(BayInfo* other) {
  using std::swap;
  swap(bay_, other->bay_);
  swap(row_, other->row_);
  swap(hasbox_, other->hasbox_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BayInfo::GetTypeName() const {
  return "atd.taskmanager.fusion.BayInfo";
}


// ===================================================================

void BlockBoxInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockBoxInfo::kBlockBigBayListFieldNumber;
const int BlockBoxInfo::kBlockSmallBayListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockBoxInfo::BlockBoxInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_taskmanager_5ffusion_2eproto::scc_info_BlockBoxInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.taskmanager.fusion.BlockBoxInfo)
}
BlockBoxInfo::BlockBoxInfo(const BlockBoxInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      blockbigbaylist_(from.blockbigbaylist_),
      blocksmallbaylist_(from.blocksmallbaylist_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:atd.taskmanager.fusion.BlockBoxInfo)
}

void BlockBoxInfo::SharedCtor() {
}

BlockBoxInfo::~BlockBoxInfo() {
  // @@protoc_insertion_point(destructor:atd.taskmanager.fusion.BlockBoxInfo)
  SharedDtor();
}

void BlockBoxInfo::SharedDtor() {
}

void BlockBoxInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockBoxInfo& BlockBoxInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_taskmanager_5ffusion_2eproto::scc_info_BlockBoxInfo.base);
  return *internal_default_instance();
}


void BlockBoxInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.taskmanager.fusion.BlockBoxInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blockbigbaylist_.Clear();
  blocksmallbaylist_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlockBoxInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:atd.taskmanager.fusion.BlockBoxInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .atd.taskmanager.fusion.BayInfo blockBigBayList = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_blockbigbaylist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.taskmanager.fusion.BayInfo blockSmallBayList = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_blocksmallbaylist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.taskmanager.fusion.BlockBoxInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.taskmanager.fusion.BlockBoxInfo)
  return false;
#undef DO_
}

void BlockBoxInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.taskmanager.fusion.BlockBoxInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .atd.taskmanager.fusion.BayInfo blockBigBayList = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blockbigbaylist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->blockbigbaylist(static_cast<int>(i)),
      output);
  }

  // repeated .atd.taskmanager.fusion.BayInfo blockSmallBayList = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blocksmallbaylist_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->blocksmallbaylist(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.taskmanager.fusion.BlockBoxInfo)
}

size_t BlockBoxInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.taskmanager.fusion.BlockBoxInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .atd.taskmanager.fusion.BayInfo blockBigBayList = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->blockbigbaylist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->blockbigbaylist(static_cast<int>(i)));
    }
  }

  // repeated .atd.taskmanager.fusion.BayInfo blockSmallBayList = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->blocksmallbaylist_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->blocksmallbaylist(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockBoxInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BlockBoxInfo*>(&from));
}

void BlockBoxInfo::MergeFrom(const BlockBoxInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.taskmanager.fusion.BlockBoxInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blockbigbaylist_.MergeFrom(from.blockbigbaylist_);
  blocksmallbaylist_.MergeFrom(from.blocksmallbaylist_);
}

void BlockBoxInfo::CopyFrom(const BlockBoxInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.taskmanager.fusion.BlockBoxInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockBoxInfo::IsInitialized() const {
  return true;
}

void BlockBoxInfo::Swap(BlockBoxInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockBoxInfo::InternalSwap(BlockBoxInfo* other) {
  using std::swap;
  CastToBase(&blockbigbaylist_)->InternalSwap(CastToBase(&other->blockbigbaylist_));
  CastToBase(&blocksmallbaylist_)->InternalSwap(CastToBase(&other->blocksmallbaylist_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BlockBoxInfo::GetTypeName() const {
  return "atd.taskmanager.fusion.BlockBoxInfo";
}


// ===================================================================

void BlockObstacleInfo::InitAsDefaultInstance() {
  ::atd::taskmanager::fusion::_BlockObstacleInfo_default_instance_._instance.get_mutable()->blockboxinfo_ = const_cast< ::atd::taskmanager::fusion::BlockBoxInfo*>(
      ::atd::taskmanager::fusion::BlockBoxInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlockObstacleInfo::kBlockNoFieldNumber;
const int BlockObstacleInfo::kDriveTypeFieldNumber;
const int BlockObstacleInfo::kBlockRtgInfoFieldNumber;
const int BlockObstacleInfo::kBlockBoxInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlockObstacleInfo::BlockObstacleInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_taskmanager_5ffusion_2eproto::scc_info_BlockObstacleInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.taskmanager.fusion.BlockObstacleInfo)
}
BlockObstacleInfo::BlockObstacleInfo(const BlockObstacleInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      blockrtginfo_(from.blockrtginfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_blockboxinfo()) {
    blockboxinfo_ = new ::atd::taskmanager::fusion::BlockBoxInfo(*from.blockboxinfo_);
  } else {
    blockboxinfo_ = NULL;
  }
  ::memcpy(&blockno_, &from.blockno_,
    static_cast<size_t>(reinterpret_cast<char*>(&drivetype_) -
    reinterpret_cast<char*>(&blockno_)) + sizeof(drivetype_));
  // @@protoc_insertion_point(copy_constructor:atd.taskmanager.fusion.BlockObstacleInfo)
}

void BlockObstacleInfo::SharedCtor() {
  ::memset(&blockboxinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drivetype_) -
      reinterpret_cast<char*>(&blockboxinfo_)) + sizeof(drivetype_));
}

BlockObstacleInfo::~BlockObstacleInfo() {
  // @@protoc_insertion_point(destructor:atd.taskmanager.fusion.BlockObstacleInfo)
  SharedDtor();
}

void BlockObstacleInfo::SharedDtor() {
  if (this != internal_default_instance()) delete blockboxinfo_;
}

void BlockObstacleInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockObstacleInfo& BlockObstacleInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_taskmanager_5ffusion_2eproto::scc_info_BlockObstacleInfo.base);
  return *internal_default_instance();
}


void BlockObstacleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.taskmanager.fusion.BlockObstacleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blockrtginfo_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(blockboxinfo_ != NULL);
    blockboxinfo_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&blockno_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&drivetype_) -
        reinterpret_cast<char*>(&blockno_)) + sizeof(drivetype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BlockObstacleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:atd.taskmanager.fusion.BlockObstacleInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 blockNo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_blockno();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blockno_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 driveType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_drivetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drivetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.taskmanager.fusion.BlockRtgInfo blockRtgInfo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_blockrtginfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.taskmanager.fusion.BlockBoxInfo blockBoxInfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_blockboxinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.taskmanager.fusion.BlockObstacleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.taskmanager.fusion.BlockObstacleInfo)
  return false;
#undef DO_
}

void BlockObstacleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.taskmanager.fusion.BlockObstacleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 blockNo = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->blockno(), output);
  }

  // optional int32 driveType = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->drivetype(), output);
  }

  // repeated .atd.taskmanager.fusion.BlockRtgInfo blockRtgInfo = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->blockrtginfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3,
      this->blockrtginfo(static_cast<int>(i)),
      output);
  }

  // optional .atd.taskmanager.fusion.BlockBoxInfo blockBoxInfo = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_blockboxinfo(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.taskmanager.fusion.BlockObstacleInfo)
}

size_t BlockObstacleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.taskmanager.fusion.BlockObstacleInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .atd.taskmanager.fusion.BlockRtgInfo blockRtgInfo = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->blockrtginfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->blockrtginfo(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .atd.taskmanager.fusion.BlockBoxInfo blockBoxInfo = 4;
    if (has_blockboxinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *blockboxinfo_);
    }

    // optional int32 blockNo = 1;
    if (has_blockno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blockno());
    }

    // optional int32 driveType = 2;
    if (has_drivetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drivetype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockObstacleInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BlockObstacleInfo*>(&from));
}

void BlockObstacleInfo::MergeFrom(const BlockObstacleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.taskmanager.fusion.BlockObstacleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blockrtginfo_.MergeFrom(from.blockrtginfo_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_blockboxinfo()->::atd::taskmanager::fusion::BlockBoxInfo::MergeFrom(from.blockboxinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      blockno_ = from.blockno_;
    }
    if (cached_has_bits & 0x00000004u) {
      drivetype_ = from.drivetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BlockObstacleInfo::CopyFrom(const BlockObstacleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.taskmanager.fusion.BlockObstacleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockObstacleInfo::IsInitialized() const {
  return true;
}

void BlockObstacleInfo::Swap(BlockObstacleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlockObstacleInfo::InternalSwap(BlockObstacleInfo* other) {
  using std::swap;
  CastToBase(&blockrtginfo_)->InternalSwap(CastToBase(&other->blockrtginfo_));
  swap(blockboxinfo_, other->blockboxinfo_);
  swap(blockno_, other->blockno_);
  swap(drivetype_, other->drivetype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BlockObstacleInfo::GetTypeName() const {
  return "atd.taskmanager.fusion.BlockObstacleInfo";
}


// ===================================================================

void BrigeQcInfo::InitAsDefaultInstance() {
  ::atd::taskmanager::fusion::_BrigeQcInfo_default_instance_._instance.get_mutable()->qccenterpos_ = const_cast< ::atd::taskmanager::fusion::Point*>(
      ::atd::taskmanager::fusion::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrigeQcInfo::kQcNoFieldNumber;
const int BrigeQcInfo::kQcHeadingFieldNumber;
const int BrigeQcInfo::kQcCenterPosFieldNumber;
const int BrigeQcInfo::kQcScopeCoordinateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrigeQcInfo::BrigeQcInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_taskmanager_5ffusion_2eproto::scc_info_BrigeQcInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.taskmanager.fusion.BrigeQcInfo)
}
BrigeQcInfo::BrigeQcInfo(const BrigeQcInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      qcscopecoordinate_(from.qcscopecoordinate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  qcno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_qcno()) {
    qcno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qcno_);
  }
  if (from.has_qccenterpos()) {
    qccenterpos_ = new ::atd::taskmanager::fusion::Point(*from.qccenterpos_);
  } else {
    qccenterpos_ = NULL;
  }
  qcheading_ = from.qcheading_;
  // @@protoc_insertion_point(copy_constructor:atd.taskmanager.fusion.BrigeQcInfo)
}

void BrigeQcInfo::SharedCtor() {
  qcno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&qccenterpos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qcheading_) -
      reinterpret_cast<char*>(&qccenterpos_)) + sizeof(qcheading_));
}

BrigeQcInfo::~BrigeQcInfo() {
  // @@protoc_insertion_point(destructor:atd.taskmanager.fusion.BrigeQcInfo)
  SharedDtor();
}

void BrigeQcInfo::SharedDtor() {
  qcno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete qccenterpos_;
}

void BrigeQcInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BrigeQcInfo& BrigeQcInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_taskmanager_5ffusion_2eproto::scc_info_BrigeQcInfo.base);
  return *internal_default_instance();
}


void BrigeQcInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.taskmanager.fusion.BrigeQcInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qcscopecoordinate_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      qcno_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(qccenterpos_ != NULL);
      qccenterpos_->Clear();
    }
  }
  qcheading_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BrigeQcInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:atd.taskmanager.fusion.BrigeQcInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string qcNo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_qcno()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double qcHeading = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_qcheading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qcheading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.taskmanager.fusion.Point qcCenterPos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_qccenterpos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.taskmanager.fusion.Point qcScopeCoordinate = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_qcscopecoordinate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.taskmanager.fusion.BrigeQcInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.taskmanager.fusion.BrigeQcInfo)
  return false;
#undef DO_
}

void BrigeQcInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.taskmanager.fusion.BrigeQcInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string qcNo = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->qcno(), output);
  }

  // optional double qcHeading = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->qcheading(), output);
  }

  // optional .atd.taskmanager.fusion.Point qcCenterPos = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_qccenterpos(), output);
  }

  // repeated .atd.taskmanager.fusion.Point qcScopeCoordinate = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->qcscopecoordinate_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4,
      this->qcscopecoordinate(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.taskmanager.fusion.BrigeQcInfo)
}

size_t BrigeQcInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.taskmanager.fusion.BrigeQcInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .atd.taskmanager.fusion.Point qcScopeCoordinate = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->qcscopecoordinate_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->qcscopecoordinate(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string qcNo = 1;
    if (has_qcno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->qcno());
    }

    // optional .atd.taskmanager.fusion.Point qcCenterPos = 3;
    if (has_qccenterpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *qccenterpos_);
    }

    // optional double qcHeading = 2;
    if (has_qcheading()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BrigeQcInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BrigeQcInfo*>(&from));
}

void BrigeQcInfo::MergeFrom(const BrigeQcInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.taskmanager.fusion.BrigeQcInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  qcscopecoordinate_.MergeFrom(from.qcscopecoordinate_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_qcno();
      qcno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.qcno_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_qccenterpos()->::atd::taskmanager::fusion::Point::MergeFrom(from.qccenterpos());
    }
    if (cached_has_bits & 0x00000004u) {
      qcheading_ = from.qcheading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BrigeQcInfo::CopyFrom(const BrigeQcInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.taskmanager.fusion.BrigeQcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrigeQcInfo::IsInitialized() const {
  return true;
}

void BrigeQcInfo::Swap(BrigeQcInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrigeQcInfo::InternalSwap(BrigeQcInfo* other) {
  using std::swap;
  CastToBase(&qcscopecoordinate_)->InternalSwap(CastToBase(&other->qcscopecoordinate_));
  qcno_.Swap(&other->qcno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(qccenterpos_, other->qccenterpos_);
  swap(qcheading_, other->qcheading_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BrigeQcInfo::GetTypeName() const {
  return "atd.taskmanager.fusion.BrigeQcInfo";
}


// ===================================================================

void BrigeInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BrigeInfo::kEnableFieldNumber;
const int BrigeInfo::kQcInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BrigeInfo::BrigeInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_taskmanager_5ffusion_2eproto::scc_info_BrigeInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.taskmanager.fusion.BrigeInfo)
}
BrigeInfo::BrigeInfo(const BrigeInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      qcinfo_(from.qcinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enable_ = from.enable_;
  // @@protoc_insertion_point(copy_constructor:atd.taskmanager.fusion.BrigeInfo)
}

void BrigeInfo::SharedCtor() {
  enable_ = false;
}

BrigeInfo::~BrigeInfo() {
  // @@protoc_insertion_point(destructor:atd.taskmanager.fusion.BrigeInfo)
  SharedDtor();
}

void BrigeInfo::SharedDtor() {
}

void BrigeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BrigeInfo& BrigeInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_taskmanager_5ffusion_2eproto::scc_info_BrigeInfo.base);
  return *internal_default_instance();
}


void BrigeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.taskmanager.fusion.BrigeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  qcinfo_.Clear();
  enable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BrigeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:atd.taskmanager.fusion.BrigeInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_enable();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.taskmanager.fusion.BrigeQcInfo qcInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_qcinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.taskmanager.fusion.BrigeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.taskmanager.fusion.BrigeInfo)
  return false;
#undef DO_
}

void BrigeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.taskmanager.fusion.BrigeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable(), output);
  }

  // repeated .atd.taskmanager.fusion.BrigeQcInfo qcInfo = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->qcinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->qcinfo(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.taskmanager.fusion.BrigeInfo)
}

size_t BrigeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.taskmanager.fusion.BrigeInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .atd.taskmanager.fusion.BrigeQcInfo qcInfo = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->qcinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->qcinfo(static_cast<int>(i)));
    }
  }

  // optional bool enable = 1;
  if (has_enable()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BrigeInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const BrigeInfo*>(&from));
}

void BrigeInfo::MergeFrom(const BrigeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.taskmanager.fusion.BrigeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  qcinfo_.MergeFrom(from.qcinfo_);
  if (from.has_enable()) {
    set_enable(from.enable());
  }
}

void BrigeInfo::CopyFrom(const BrigeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.taskmanager.fusion.BrigeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrigeInfo::IsInitialized() const {
  return true;
}

void BrigeInfo::Swap(BrigeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BrigeInfo::InternalSwap(BrigeInfo* other) {
  using std::swap;
  CastToBase(&qcinfo_)->InternalSwap(CastToBase(&other->qcinfo_));
  swap(enable_, other->enable_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string BrigeInfo::GetTypeName() const {
  return "atd.taskmanager.fusion.BrigeInfo";
}


// ===================================================================

void TaskManager2Fusion::InitAsDefaultInstance() {
  ::atd::taskmanager::fusion::_TaskManager2Fusion_default_instance_._instance.get_mutable()->blockobstacleinfo_ = const_cast< ::atd::taskmanager::fusion::BlockObstacleInfo*>(
      ::atd::taskmanager::fusion::BlockObstacleInfo::internal_default_instance());
  ::atd::taskmanager::fusion::_TaskManager2Fusion_default_instance_._instance.get_mutable()->brigeinfo_ = const_cast< ::atd::taskmanager::fusion::BrigeInfo*>(
      ::atd::taskmanager::fusion::BrigeInfo::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskManager2Fusion::kBlockObstacleInfoFieldNumber;
const int TaskManager2Fusion::kBrigeInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskManager2Fusion::TaskManager2Fusion()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_taskmanager_5ffusion_2eproto::scc_info_TaskManager2Fusion.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.taskmanager.fusion.TaskManager2Fusion)
}
TaskManager2Fusion::TaskManager2Fusion(const TaskManager2Fusion& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_blockobstacleinfo()) {
    blockobstacleinfo_ = new ::atd::taskmanager::fusion::BlockObstacleInfo(*from.blockobstacleinfo_);
  } else {
    blockobstacleinfo_ = NULL;
  }
  if (from.has_brigeinfo()) {
    brigeinfo_ = new ::atd::taskmanager::fusion::BrigeInfo(*from.brigeinfo_);
  } else {
    brigeinfo_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.taskmanager.fusion.TaskManager2Fusion)
}

void TaskManager2Fusion::SharedCtor() {
  ::memset(&blockobstacleinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brigeinfo_) -
      reinterpret_cast<char*>(&blockobstacleinfo_)) + sizeof(brigeinfo_));
}

TaskManager2Fusion::~TaskManager2Fusion() {
  // @@protoc_insertion_point(destructor:atd.taskmanager.fusion.TaskManager2Fusion)
  SharedDtor();
}

void TaskManager2Fusion::SharedDtor() {
  if (this != internal_default_instance()) delete blockobstacleinfo_;
  if (this != internal_default_instance()) delete brigeinfo_;
}

void TaskManager2Fusion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskManager2Fusion& TaskManager2Fusion::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_taskmanager_5ffusion_2eproto::scc_info_TaskManager2Fusion.base);
  return *internal_default_instance();
}


void TaskManager2Fusion::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.taskmanager.fusion.TaskManager2Fusion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(blockobstacleinfo_ != NULL);
      blockobstacleinfo_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(brigeinfo_ != NULL);
      brigeinfo_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskManager2Fusion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:atd.taskmanager.fusion.TaskManager2Fusion)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.taskmanager.fusion.BlockObstacleInfo blockObstacleInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_blockobstacleinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.taskmanager.fusion.BrigeInfo brigeInfo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_brigeinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.taskmanager.fusion.TaskManager2Fusion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.taskmanager.fusion.TaskManager2Fusion)
  return false;
#undef DO_
}

void TaskManager2Fusion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.taskmanager.fusion.TaskManager2Fusion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.taskmanager.fusion.BlockObstacleInfo blockObstacleInfo = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_blockobstacleinfo(), output);
  }

  // optional .atd.taskmanager.fusion.BrigeInfo brigeInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_brigeinfo(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.taskmanager.fusion.TaskManager2Fusion)
}

size_t TaskManager2Fusion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.taskmanager.fusion.TaskManager2Fusion)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional .atd.taskmanager.fusion.BlockObstacleInfo blockObstacleInfo = 1;
    if (has_blockobstacleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *blockobstacleinfo_);
    }

    // optional .atd.taskmanager.fusion.BrigeInfo brigeInfo = 2;
    if (has_brigeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *brigeinfo_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskManager2Fusion::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TaskManager2Fusion*>(&from));
}

void TaskManager2Fusion::MergeFrom(const TaskManager2Fusion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.taskmanager.fusion.TaskManager2Fusion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_blockobstacleinfo()->::atd::taskmanager::fusion::BlockObstacleInfo::MergeFrom(from.blockobstacleinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_brigeinfo()->::atd::taskmanager::fusion::BrigeInfo::MergeFrom(from.brigeinfo());
    }
  }
}

void TaskManager2Fusion::CopyFrom(const TaskManager2Fusion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.taskmanager.fusion.TaskManager2Fusion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskManager2Fusion::IsInitialized() const {
  return true;
}

void TaskManager2Fusion::Swap(TaskManager2Fusion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskManager2Fusion::InternalSwap(TaskManager2Fusion* other) {
  using std::swap;
  swap(blockobstacleinfo_, other->blockobstacleinfo_);
  swap(brigeinfo_, other->brigeinfo_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string TaskManager2Fusion::GetTypeName() const {
  return "atd.taskmanager.fusion.TaskManager2Fusion";
}


// ===================================================================

void RouteInfo::InitAsDefaultInstance() {
  ::atd::taskmanager::fusion::_RouteInfo_default_instance_._instance.get_mutable()->centercoordinate_ = const_cast< ::atd::taskmanager::fusion::Point*>(
      ::atd::taskmanager::fusion::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouteInfo::kVehicleIdFieldNumber;
const int RouteInfo::kVehicleTypeFieldNumber;
const int RouteInfo::kCenterCoordinateFieldNumber;
const int RouteInfo::kCoordinateTimeFieldNumber;
const int RouteInfo::kRouteFieldNumber;
const int RouteInfo::kRouteTimeFieldNumber;
const int RouteInfo::kSpeedFieldNumber;
const int RouteInfo::kHeadingFieldNumber;
const int RouteInfo::kWorkingModeFieldNumber;
const int RouteInfo::kTaskTypeFieldNumber;
const int RouteInfo::kAxisAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouteInfo::RouteInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_taskmanager_5ffusion_2eproto::scc_info_RouteInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.taskmanager.fusion.RouteInfo)
}
RouteInfo::RouteInfo(const RouteInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      route_(from.route_),
      axisangle_(from.axisangle_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vehicleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vehicleid()) {
    vehicleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleid_);
  }
  vehicletype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vehicletype()) {
    vehicletype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicletype_);
  }
  if (from.has_centercoordinate()) {
    centercoordinate_ = new ::atd::taskmanager::fusion::Point(*from.centercoordinate_);
  } else {
    centercoordinate_ = NULL;
  }
  ::memcpy(&coordinatetime_, &from.coordinatetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&tasktype_) -
    reinterpret_cast<char*>(&coordinatetime_)) + sizeof(tasktype_));
  // @@protoc_insertion_point(copy_constructor:atd.taskmanager.fusion.RouteInfo)
}

void RouteInfo::SharedCtor() {
  vehicleid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicletype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&centercoordinate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tasktype_) -
      reinterpret_cast<char*>(&centercoordinate_)) + sizeof(tasktype_));
}

RouteInfo::~RouteInfo() {
  // @@protoc_insertion_point(destructor:atd.taskmanager.fusion.RouteInfo)
  SharedDtor();
}

void RouteInfo::SharedDtor() {
  vehicleid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vehicletype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete centercoordinate_;
}

void RouteInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RouteInfo& RouteInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_taskmanager_5ffusion_2eproto::scc_info_RouteInfo.base);
  return *internal_default_instance();
}


void RouteInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.taskmanager.fusion.RouteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  route_.Clear();
  axisangle_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      vehicleid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      vehicletype_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(centercoordinate_ != NULL);
      centercoordinate_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&coordinatetime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&workingmode_) -
        reinterpret_cast<char*>(&coordinatetime_)) + sizeof(workingmode_));
  }
  tasktype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RouteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:atd.taskmanager.fusion.RouteInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string vehicleId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicleid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vehicleType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vehicletype()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.taskmanager.fusion.Point centerCoordinate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_centercoordinate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 coordinateTime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_coordinatetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coordinatetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.taskmanager.fusion.Point route = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_route()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 routeTime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_routetime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &routetime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heading = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 workingMode = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_workingmode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &workingmode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 taskType = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_tasktype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tasktype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double axisAngle = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u /* 89 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 89u, input, this->mutable_axisangle())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_axisangle())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.taskmanager.fusion.RouteInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.taskmanager.fusion.RouteInfo)
  return false;
#undef DO_
}

void RouteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.taskmanager.fusion.RouteInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string vehicleId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vehicleid(), output);
  }

  // optional string vehicleType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->vehicletype(), output);
  }

  // optional .atd.taskmanager.fusion.Point centerCoordinate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_centercoordinate(), output);
  }

  // optional int64 coordinateTime = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->coordinatetime(), output);
  }

  // repeated .atd.taskmanager.fusion.Point route = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->route_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5,
      this->route(static_cast<int>(i)),
      output);
  }

  // optional int64 routeTime = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->routetime(), output);
  }

  // optional float speed = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->speed(), output);
  }

  // optional float heading = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->heading(), output);
  }

  // optional int32 workingMode = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->workingmode(), output);
  }

  // optional int32 taskType = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->tasktype(), output);
  }

  // repeated double axisAngle = 11;
  for (int i = 0, n = this->axisangle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      11, this->axisangle(i), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.taskmanager.fusion.RouteInfo)
}

size_t RouteInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.taskmanager.fusion.RouteInfo)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .atd.taskmanager.fusion.Point route = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->route_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->route(static_cast<int>(i)));
    }
  }

  // repeated double axisAngle = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->axisangle_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->axisangle_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional string vehicleId = 1;
    if (has_vehicleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vehicleid());
    }

    // optional string vehicleType = 2;
    if (has_vehicletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vehicletype());
    }

    // optional .atd.taskmanager.fusion.Point centerCoordinate = 3;
    if (has_centercoordinate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *centercoordinate_);
    }

    // optional int64 coordinateTime = 4;
    if (has_coordinatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coordinatetime());
    }

    // optional int64 routeTime = 6;
    if (has_routetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->routetime());
    }

    // optional float speed = 7;
    if (has_speed()) {
      total_size += 1 + 4;
    }

    // optional float heading = 8;
    if (has_heading()) {
      total_size += 1 + 4;
    }

    // optional int32 workingMode = 9;
    if (has_workingmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->workingmode());
    }

  }
  // optional int32 taskType = 10;
  if (has_tasktype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tasktype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RouteInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RouteInfo*>(&from));
}

void RouteInfo::MergeFrom(const RouteInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.taskmanager.fusion.RouteInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  route_.MergeFrom(from.route_);
  axisangle_.MergeFrom(from.axisangle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_vehicleid();
      vehicleid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicleid_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_vehicletype();
      vehicletype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vehicletype_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_centercoordinate()->::atd::taskmanager::fusion::Point::MergeFrom(from.centercoordinate());
    }
    if (cached_has_bits & 0x00000008u) {
      coordinatetime_ = from.coordinatetime_;
    }
    if (cached_has_bits & 0x00000010u) {
      routetime_ = from.routetime_;
    }
    if (cached_has_bits & 0x00000020u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000040u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000080u) {
      workingmode_ = from.workingmode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_tasktype(from.tasktype());
  }
}

void RouteInfo::CopyFrom(const RouteInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.taskmanager.fusion.RouteInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteInfo::IsInitialized() const {
  return true;
}

void RouteInfo::Swap(RouteInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouteInfo::InternalSwap(RouteInfo* other) {
  using std::swap;
  CastToBase(&route_)->InternalSwap(CastToBase(&other->route_));
  axisangle_.InternalSwap(&other->axisangle_);
  vehicleid_.Swap(&other->vehicleid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  vehicletype_.Swap(&other->vehicletype_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(centercoordinate_, other->centercoordinate_);
  swap(coordinatetime_, other->coordinatetime_);
  swap(routetime_, other->routetime_);
  swap(speed_, other->speed_);
  swap(heading_, other->heading_);
  swap(workingmode_, other->workingmode_);
  swap(tasktype_, other->tasktype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RouteInfo::GetTypeName() const {
  return "atd.taskmanager.fusion.RouteInfo";
}


// ===================================================================

void MultipleVehiclesRoutes::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultipleVehiclesRoutes::kTimestampFieldNumber;
const int MultipleVehiclesRoutes::kMultipleVehiclesRoutesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultipleVehiclesRoutes::MultipleVehiclesRoutes()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_taskmanager_5ffusion_2eproto::scc_info_MultipleVehiclesRoutes.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.taskmanager.fusion.MultipleVehiclesRoutes)
}
MultipleVehiclesRoutes::MultipleVehiclesRoutes(const MultipleVehiclesRoutes& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      multiplevehiclesroutes_(from.multiplevehiclesroutes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:atd.taskmanager.fusion.MultipleVehiclesRoutes)
}

void MultipleVehiclesRoutes::SharedCtor() {
  timestamp_ = GOOGLE_LONGLONG(0);
}

MultipleVehiclesRoutes::~MultipleVehiclesRoutes() {
  // @@protoc_insertion_point(destructor:atd.taskmanager.fusion.MultipleVehiclesRoutes)
  SharedDtor();
}

void MultipleVehiclesRoutes::SharedDtor() {
}

void MultipleVehiclesRoutes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MultipleVehiclesRoutes& MultipleVehiclesRoutes::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_taskmanager_5ffusion_2eproto::scc_info_MultipleVehiclesRoutes.base);
  return *internal_default_instance();
}


void MultipleVehiclesRoutes::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.taskmanager.fusion.MultipleVehiclesRoutes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multiplevehiclesroutes_.Clear();
  timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MultipleVehiclesRoutes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:atd.taskmanager.fusion.MultipleVehiclesRoutes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.taskmanager.fusion.RouteInfo MultipleVehiclesRoutes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_multiplevehiclesroutes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.taskmanager.fusion.MultipleVehiclesRoutes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.taskmanager.fusion.MultipleVehiclesRoutes)
  return false;
#undef DO_
}

void MultipleVehiclesRoutes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.taskmanager.fusion.MultipleVehiclesRoutes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timestamp(), output);
  }

  // repeated .atd.taskmanager.fusion.RouteInfo MultipleVehiclesRoutes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->multiplevehiclesroutes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->multiplevehiclesroutes(static_cast<int>(i)),
      output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.taskmanager.fusion.MultipleVehiclesRoutes)
}

size_t MultipleVehiclesRoutes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.taskmanager.fusion.MultipleVehiclesRoutes)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .atd.taskmanager.fusion.RouteInfo MultipleVehiclesRoutes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->multiplevehiclesroutes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->multiplevehiclesroutes(static_cast<int>(i)));
    }
  }

  // optional int64 timestamp = 1;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultipleVehiclesRoutes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MultipleVehiclesRoutes*>(&from));
}

void MultipleVehiclesRoutes::MergeFrom(const MultipleVehiclesRoutes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.taskmanager.fusion.MultipleVehiclesRoutes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multiplevehiclesroutes_.MergeFrom(from.multiplevehiclesroutes_);
  if (from.has_timestamp()) {
    set_timestamp(from.timestamp());
  }
}

void MultipleVehiclesRoutes::CopyFrom(const MultipleVehiclesRoutes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.taskmanager.fusion.MultipleVehiclesRoutes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultipleVehiclesRoutes::IsInitialized() const {
  return true;
}

void MultipleVehiclesRoutes::Swap(MultipleVehiclesRoutes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultipleVehiclesRoutes::InternalSwap(MultipleVehiclesRoutes* other) {
  using std::swap;
  CastToBase(&multiplevehiclesroutes_)->InternalSwap(CastToBase(&other->multiplevehiclesroutes_));
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string MultipleVehiclesRoutes::GetTypeName() const {
  return "atd.taskmanager.fusion.MultipleVehiclesRoutes";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fusion
}  // namespace taskmanager
}  // namespace atd
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::atd::taskmanager::fusion::Point* Arena::CreateMaybeMessage< ::atd::taskmanager::fusion::Point >(Arena* arena) {
  return Arena::CreateInternal< ::atd::taskmanager::fusion::Point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::atd::taskmanager::fusion::BlockRtgInfo* Arena::CreateMaybeMessage< ::atd::taskmanager::fusion::BlockRtgInfo >(Arena* arena) {
  return Arena::CreateInternal< ::atd::taskmanager::fusion::BlockRtgInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::atd::taskmanager::fusion::BayInfo* Arena::CreateMaybeMessage< ::atd::taskmanager::fusion::BayInfo >(Arena* arena) {
  return Arena::CreateInternal< ::atd::taskmanager::fusion::BayInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::atd::taskmanager::fusion::BlockBoxInfo* Arena::CreateMaybeMessage< ::atd::taskmanager::fusion::BlockBoxInfo >(Arena* arena) {
  return Arena::CreateInternal< ::atd::taskmanager::fusion::BlockBoxInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::atd::taskmanager::fusion::BlockObstacleInfo* Arena::CreateMaybeMessage< ::atd::taskmanager::fusion::BlockObstacleInfo >(Arena* arena) {
  return Arena::CreateInternal< ::atd::taskmanager::fusion::BlockObstacleInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::atd::taskmanager::fusion::BrigeQcInfo* Arena::CreateMaybeMessage< ::atd::taskmanager::fusion::BrigeQcInfo >(Arena* arena) {
  return Arena::CreateInternal< ::atd::taskmanager::fusion::BrigeQcInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::atd::taskmanager::fusion::BrigeInfo* Arena::CreateMaybeMessage< ::atd::taskmanager::fusion::BrigeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::atd::taskmanager::fusion::BrigeInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::atd::taskmanager::fusion::TaskManager2Fusion* Arena::CreateMaybeMessage< ::atd::taskmanager::fusion::TaskManager2Fusion >(Arena* arena) {
  return Arena::CreateInternal< ::atd::taskmanager::fusion::TaskManager2Fusion >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::atd::taskmanager::fusion::RouteInfo* Arena::CreateMaybeMessage< ::atd::taskmanager::fusion::RouteInfo >(Arena* arena) {
  return Arena::CreateInternal< ::atd::taskmanager::fusion::RouteInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::atd::taskmanager::fusion::MultipleVehiclesRoutes* Arena::CreateMaybeMessage< ::atd::taskmanager::fusion::MultipleVehiclesRoutes >(Arena* arena) {
  return Arena::CreateInternal< ::atd::taskmanager::fusion::MultipleVehiclesRoutes >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

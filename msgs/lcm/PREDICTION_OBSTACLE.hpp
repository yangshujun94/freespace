/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __PREDICTION_OBSTACLE_hpp__
#define __PREDICTION_OBSTACLE_hpp__

#include "TRAJECTORY_CURVE.hpp"
#include "TRAJECTORY_CURVE.hpp"
#include "VALUE_2D.hpp"

class PREDICTION_OBSTACLE
{
public:
    int8_t bValid;

    int16_t nObjectID;

    uint8_t nType;

    float fHeading;

    float fOrient;

    float fRelX;

    float fRelY;

    float fLength;

    float fWidth;

    float fAbsVelX;

    float fAbsVelY;

    float fAbsSpeed;

    float fAccel;

    float fYawRate;

    uint8_t nMoveStatus;

    uint8_t nLaneLabel;

    float gfPosCorrMatrix[2][2];

    TRAJECTORY_CURVE stHistoryTrajectory;

    TRAJECTORY_CURVE stPredictTrajectory;

    VALUE_2D gstPredictTrajectory[50];

public:
    /**
     * Encode a message into binary form.
     *
     * @param buf The output buffer.
     * @param offset Encoding starts at thie byte offset into @p buf.
     * @param maxlen Maximum number of bytes to write.  This should generally be
     *  equal to getEncodedSize().
     * @return The number of bytes encoded, or <0 on error.
     */
    inline int encode(void *buf, int offset, int maxlen) const;

    /**
     * Check how many bytes are required to encode this message.
     */
    inline int getEncodedSize() const;

    /**
     * Decode a message from binary form into this instance.
     *
     * @param buf The buffer containing the encoded message.
     * @param offset The byte offset into @p buf where the encoded message starts.
     * @param maxlen The maximum number of bytes to reqad while decoding.
     * @return The number of bytes decoded, or <0 if an error occured.
     */
    inline int decode(const void *buf, int offset, int maxlen);

    /**
     * Retrieve the 64-bit fingerprint identifying the structure of the message.
     * Note that the fingerprint is the same for all instances of the same
     * message type, and is a fingerprint on the message type definition, not on
     * the message contents.
     */
    inline static int64_t getHash();

    /**
     * Returns "PREDICTION_OBSTACLE"
     */
    inline static const char *getTypeName();

    // LCM support functions. Users should not call these
    inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
    inline int _getEncodedSizeNoHash() const;
    inline int _decodeNoHash(const void *buf, int offset, int maxlen);
    inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int PREDICTION_OBSTACLE::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    return pos;
}

int PREDICTION_OBSTACLE::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0)
        return thislen;
    else
        pos += thislen;
    if (msg_hash != getHash())
        return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0)
        return thislen;
    else
        pos += thislen;

    return pos;
}

int PREDICTION_OBSTACLE::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t PREDICTION_OBSTACLE::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char *PREDICTION_OBSTACLE::getTypeName()
{
    return "PREDICTION_OBSTACLE";
}

int PREDICTION_OBSTACLE::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->bValid, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->nObjectID, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __byte_encode_array(buf, offset + pos, maxlen - pos, &this->nType, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->fHeading, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->fOrient, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->fRelX, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->fRelY, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->fLength, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->fWidth, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->fAbsVelX, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->fAbsVelY, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->fAbsSpeed, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->fAccel, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->fYawRate, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __byte_encode_array(buf, offset + pos, maxlen - pos, &this->nMoveStatus, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __byte_encode_array(buf, offset + pos, maxlen - pos, &this->nLaneLabel, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    for (int a0 = 0; a0 < 2; a0++)
    {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->gfPosCorrMatrix[a0][0], 2);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    tlen = this->stHistoryTrajectory._encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = this->stPredictTrajectory._encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    for (int a0 = 0; a0 < 50; a0++)
    {
        tlen = this->gstPredictTrajectory[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    return pos;
}

int PREDICTION_OBSTACLE::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->bValid, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->nObjectID, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __byte_decode_array(buf, offset + pos, maxlen - pos, &this->nType, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->fHeading, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->fOrient, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->fRelX, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->fRelY, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->fLength, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->fWidth, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->fAbsVelX, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->fAbsVelY, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->fAbsSpeed, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->fAccel, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->fYawRate, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __byte_decode_array(buf, offset + pos, maxlen - pos, &this->nMoveStatus, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = __byte_decode_array(buf, offset + pos, maxlen - pos, &this->nLaneLabel, 1);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    for (int a0 = 0; a0 < 2; a0++)
    {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->gfPosCorrMatrix[a0][0], 2);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    tlen = this->stHistoryTrajectory._decodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    tlen = this->stPredictTrajectory._decodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0)
        return tlen;
    else
        pos += tlen;

    for (int a0 = 0; a0 < 50; a0++)
    {
        tlen = this->gstPredictTrajectory[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if (tlen < 0)
            return tlen;
        else
            pos += tlen;
    }

    return pos;
}

int PREDICTION_OBSTACLE::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __byte_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __byte_encoded_array_size(NULL, 1);
    enc_size += __byte_encoded_array_size(NULL, 1);
    enc_size += 2 * __float_encoded_array_size(NULL, 2);
    enc_size += this->stHistoryTrajectory._getEncodedSizeNoHash();
    enc_size += this->stPredictTrajectory._getEncodedSizeNoHash();
    for (int a0 = 0; a0 < 50; a0++)
    {
        enc_size += this->gstPredictTrajectory[a0]._getEncodedSizeNoHash();
    }
    return enc_size;
}

uint64_t PREDICTION_OBSTACLE::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for (fp = p; fp != NULL; fp = fp->parent)
        if (fp->v == PREDICTION_OBSTACLE::getHash)
            return 0;
    const __lcm_hash_ptr cp = {p, (void *)PREDICTION_OBSTACLE::getHash};

    uint64_t hash = 0xcb1cf0dfde35bd2bLL +
                    TRAJECTORY_CURVE::_computeHash(&cp) +
                    TRAJECTORY_CURVE::_computeHash(&cp) +
                    VALUE_2D::_computeHash(&cp);

    return (hash << 1) + ((hash >> 63) & 1);
}

#endif

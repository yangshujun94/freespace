/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __ASSOCIATED_FMS_INFO_hpp__
#define __ASSOCIATED_FMS_INFO_hpp__

#include <string>
#include "HEADER.hpp"

/**
 * fmsHeader 目前对应的fms系统的时间戳
 * vehicle_id 目标在fms系统中对应的车辆代号 H开头
 */
class ASSOCIATED_FMS_INFO
{
public:
  HEADER fmsHeader;

  std::string vehicle_id;

public:
  /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
  inline int encode(void *buf, int offset, int maxlen) const;

  /**
         * Check how many bytes are required to encode this message.
         */
  inline int getEncodedSize() const;

  /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
  inline int decode(const void *buf, int offset, int maxlen);

  /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
  inline static int64_t getHash();

  /**
         * Returns "ASSOCIATED_FMS_INFO"
         */
  inline static const char *getTypeName();

  // LCM support functions. Users should not call these
  inline int             _encodeNoHash(void *buf, int offset, int maxlen) const;
  inline int             _getEncodedSizeNoHash() const;
  inline int             _decodeNoHash(const void *buf, int offset, int maxlen);
  inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int ASSOCIATED_FMS_INFO::encode(void *buf, int offset, int maxlen) const
{
  int     pos  = 0, tlen;
  int64_t hash = (int64_t)getHash();

  tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
  if(tlen < 0)
    return tlen;
  else
    pos += tlen;

  tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
  if(tlen < 0)
    return tlen;
  else
    pos += tlen;

  return pos;
}

int ASSOCIATED_FMS_INFO::decode(const void *buf, int offset, int maxlen)
{
  int pos = 0, thislen;

  int64_t msg_hash;
  thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
  if(thislen < 0)
    return thislen;
  else
    pos += thislen;
  if(msg_hash != getHash())
    return -1;

  thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
  if(thislen < 0)
    return thislen;
  else
    pos += thislen;

  return pos;
}

int ASSOCIATED_FMS_INFO::getEncodedSize() const
{
  return 8 + _getEncodedSizeNoHash();
}

int64_t ASSOCIATED_FMS_INFO::getHash()
{
  static int64_t hash = _computeHash(NULL);
  return hash;
}

const char *ASSOCIATED_FMS_INFO::getTypeName()
{
  return "ASSOCIATED_FMS_INFO";
}

int ASSOCIATED_FMS_INFO::_encodeNoHash(void *buf, int offset, int maxlen) const
{
  int pos = 0, tlen;

  tlen = this->fmsHeader._encodeNoHash(buf, offset + pos, maxlen - pos);
  if(tlen < 0)
    return tlen;
  else
    pos += tlen;

  char *vehicle_id_cstr = (char *)this->vehicle_id.c_str();
  tlen                  = __string_encode_array(buf, offset + pos, maxlen - pos, &vehicle_id_cstr, 1);
  if(tlen < 0)
    return tlen;
  else
    pos += tlen;

  return pos;
}

int ASSOCIATED_FMS_INFO::_decodeNoHash(const void *buf, int offset, int maxlen)
{
  int pos = 0, tlen;

  tlen = this->fmsHeader._decodeNoHash(buf, offset + pos, maxlen - pos);
  if(tlen < 0)
    return tlen;
  else
    pos += tlen;

  int32_t __vehicle_id_len__;
  tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__vehicle_id_len__, 1);
  if(tlen < 0)
    return tlen;
  else
    pos += tlen;
  if(__vehicle_id_len__ > maxlen - pos)
    return -1;
  this->vehicle_id.assign(((const char *)buf) + offset + pos, __vehicle_id_len__ - 1);
  pos += __vehicle_id_len__;

  return pos;
}

int ASSOCIATED_FMS_INFO::_getEncodedSizeNoHash() const
{
  int enc_size = 0;
  enc_size += this->fmsHeader._getEncodedSizeNoHash();
  enc_size += this->vehicle_id.size() + 4 + 1;
  return enc_size;
}

uint64_t ASSOCIATED_FMS_INFO::_computeHash(const __lcm_hash_ptr *p)
{
  const __lcm_hash_ptr *fp;
  for(fp = p; fp != NULL; fp = fp->parent)
    if(fp->v == ASSOCIATED_FMS_INFO::getHash)
      return 0;
  const __lcm_hash_ptr cp = {p, (void *)ASSOCIATED_FMS_INFO::getHash};

  uint64_t hash = 0x9267e5439e66d1c5LL +
                  HEADER::_computeHash(&cp);

  return (hash << 1) + ((hash >> 63) & 1);
}

#endif
